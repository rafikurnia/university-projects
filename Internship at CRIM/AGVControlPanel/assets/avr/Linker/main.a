;/*****************************************************
;Project : AGV Project - ESP8266
;Version : 1.0
;Date    : 07/07/2015
;Author  : Rafi Kurnia Putra
;Company : Universitas Indonesia
;Comments: + Filter data
;          + USART0(esp8266) and USART1(debug) are usable
;          + Timer to Interrupt Routine
;
;Chip type               : ATmega2560
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 4096
;*****************************************************/
;
;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdbool.h>
;#include <stdlib.h>
;#include <string.h>
;#include <alcd.h>
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;//Untuk menggunakan printf untuk lebih dari 1 usart
;#define _ALTERNATE_PUTCHAR_
;#define CUSTOM_BUFFER_SIZE 2048     //ukuran buffer untuk tampung data sebelum diproses
;#define USART0 0
;#define USART1 1
;
;#define IPADDR 192.168.0.250
;
;// USART0 Receiver buffer -> sedikit modifikasi nama variable
;#define RX_BUFFER_SIZE0 32
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,serial0Available;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,serial0Available;
;#endif
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 32
;#if RX_BUFFER_SIZE1 <= 256
;unsigned char rx_wr_index1,rx_rd_index1,serial1Available;
;#else
;unsigned int rx_wr_index1,rx_rd_index1,serial1Available;
;#endif
;char rx_buffer1[RX_BUFFER_SIZE1];
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// This flag is set on USART1 Receiver buffer overflow
;bit rx_buffer_overflow1;
;
;// Global Variables
;int i,count=0,afterReset=0;
;
;// Status Attributes
;const int id=1;

	.DSEG
;bool connected=1;
;bool motor=1;
;int signals=11;
;int battery=87;
;int position=3;
;bool obstacle=0;
;
;//variable untuk menentukan output usart yang akan dituju
;//harus diubah setiap mengganti output
;unsigned char usartOutput = USART1;
;bool busy = false;
;bool setting = false;
;
;void toggleLed();
;void updateConnection();
;void sendStatus();
;void resetModule();
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0076 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0077     char status,data;
; 0000 0078     status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0079     data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 007A     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 007B     {
; 0000 007C         rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 007D         #if RX_BUFFER_SIZE0 == 256
; 0000 007E         // special case for receiver buffer size=256
; 0000 007F         if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0080         #else
; 0000 0081         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0082         if (++serial0Available == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0083         {
; 0000 0084             serial0Available=0;
;PCODE: $00000026 VOL: 0
; 0000 0085             rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0086         }
; 0000 0087         #endif
; 0000 0088     }
;PCODE: $00000029 VOL: 0
; 0000 0089 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0090 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0091     char data;
; 0000 0092     while (serial0Available==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0093     data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0094     #if RX_BUFFER_SIZE0 != 256
; 0000 0095     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0096     #endif
; 0000 0097     #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0098     --serial0Available;
;PCODE: $00000043 VOL: 0
; 0000 0099     #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 009A     return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 009B }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;//Putchar custom, untuk diintegrasikan dengan printf
;void putchar(char c)
; 0000 00A1 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00A2     switch (usartOutput)
;PCODE: $0000004C VOL: 0
;	c -> Y+0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00A3     {
; 0000 00A4         case USART0: // the output will be directed to USART0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00A5             while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00A6             UDR0=c;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00A7             break;
;PCODE: $00000059 VOL: 0
; 0000 00A8 
; 0000 00A9         case USART1: // the output will be directed to USART1
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00AA             while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00AB             UDR1=c;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00AC             break;
;PCODE: $00000065 VOL: 0
; 0000 00AD     }
;PCODE: $00000066 VOL: 0
; 0000 00AE }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 00B2 {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00B3     char status,data;
; 0000 00B4     status=UCSR1A;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00B5     data=UDR1;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00B6     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00B7     {
; 0000 00B8         rx_buffer1[rx_wr_index1++]=data;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00B9         #if RX_BUFFER_SIZE1 == 256
; 0000 00BA         // special case for receiver buffer size=256
; 0000 00BB         if (++rx_counter1 == 0) rx_buffer_overflow1=1;
; 0000 00BC         #else
; 0000 00BD         if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00BE         if (++serial1Available == RX_BUFFER_SIZE1)
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00BF         {
; 0000 00C0             serial1Available=0;
;PCODE: $00000083 VOL: 0
; 0000 00C1             rx_buffer_overflow1=1;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C2         }
; 0000 00C3         #endif
; 0000 00C4     }
;PCODE: $00000086 VOL: 0
; 0000 00C5 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;char getchar1(void)
; 0000 00CA {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CB     char data;
; 0000 00CC     while (serial1Available==0);
;PCODE: $0000008E VOL: 0
;	data -> R17
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00CD     data=rx_buffer1[rx_rd_index1++];
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00CE     #if RX_BUFFER_SIZE1 != 256
; 0000 00CF     if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D0     #endif
; 0000 00D1     #asm("cli")
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
	cli
;PCODE: $0000009F VOL: 0
; 0000 00D2     --serial1Available;
;PCODE: $000000A0 VOL: 0
; 0000 00D3     #asm("sei")
;PCODE: $000000A1 VOL: 0
	sei
;PCODE: $000000A2 VOL: 0
; 0000 00D4     return data;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D5 }
;PCODE: $000000A6 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 00DB {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00DC     while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000000A9 VOL: 0
;	c -> Y+0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00DD     UDR1=c;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00DE }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;#pragma used-
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00E3 {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E4     // Reinitialize Timer1 value
; 0000 00E5     TCNT1H=0xABA1 >> 8;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E6     TCNT1L=0xABA1 & 0xff;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E7     //timer untuk counting jeda waktu setelah data diterima sebelum diproses
; 0000 00E8 
; 0000 00E9     afterReset++;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00EA 
; 0000 00EB     if (afterReset>10) resetModule();
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00EC 
; 0000 00ED     toggleLed();
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00EE     updateConnection();
;PCODE: $000000C4 VOL: 0
; 0000 00EF 
; 0000 00F0 
; 0000 00F1 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;// Timer3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0000 00F5 {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F6     // Reinitialize Timer3 value
; 0000 00F7     TCNT3H=0x2D0F >> 8;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F8     TCNT3L=0x2D0F & 0xff;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F9 
; 0000 00FA 
; 0000 00FB     sendStatus();
;PCODE: $000000CE VOL: 0
; 0000 00FC }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;
;// Timer4 overflow interrupt service routine
;interrupt [TIM4_OVF] void timer4_ovf_isr(void)
; 0000 0100 {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0101     // Reinitialize Timer4 value
; 0000 0102     TCNT3H=0xDDDD >> 8;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0103     TCNT3L=0xDDDD & 0xff;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0104 
; 0000 0105     count++;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0106 }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;
;void initAll()
; 0000 0109 {
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 010A     // Crystal Oscillator division factor: 1
; 0000 010B     #pragma optsize-
; 0000 010C     CLKPR=0x80;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 010D     CLKPR=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 010E     #ifdef _OPTIMIZE_SIZE_
; 0000 010F     #pragma optsize+
; 0000 0110     #endif
; 0000 0111 
; 0000 0112     // Input/Output Ports initialization
; 0000 0113     // Port A initialization
; 0000 0114     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0115     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0116     PORTA=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0117     DDRA=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0118 
; 0000 0119     // Port B initialization
; 0000 011A     // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 011B     // State7=0 State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 011C     PORTB=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 011D     DDRB=0x80;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 011E 
; 0000 011F     // Port C initialization
; 0000 0120     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0121     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0122     PORTC=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0123     DDRC=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0124 
; 0000 0125     // Port D initialization
; 0000 0126     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0127     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0128     PORTD=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0129     DDRD=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 012A 
; 0000 012B     // Port E initialization
; 0000 012C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 012D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 012E     PORTE=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 012F     DDRE=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0130 
; 0000 0131     // Port F initialization
; 0000 0132     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0133     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0134     PORTF=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0135     DDRF=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0136 
; 0000 0137     // Port G initialization
; 0000 0138     // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0139     // State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 013A     PORTG=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 013B     DDRG=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 013C 
; 0000 013D     // Port H initialization
; 0000 013E     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 013F     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0140     PORTH=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0141     DDRH=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0142 
; 0000 0143     // Port J initialization
; 0000 0144     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0145     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0146     PORTJ=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0147     DDRJ=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0148 
; 0000 0149     // Port K initialization
; 0000 014A     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014B     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 014C     PORTK=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 014D     DDRK=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 014E 
; 0000 014F     // Port L initialization
; 0000 0150     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0151     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0152     PORTL=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0153     DDRL=0xFF;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0154 
; 0000 0155     // Timer/Counter 0 initialization
; 0000 0156     // Clock source: System Clock
; 0000 0157     // Clock value: Timer 0 Stopped
; 0000 0158     // Mode: Normal top=0xFF
; 0000 0159     // OC0A output: Disconnected
; 0000 015A     // OC0B output: Disconnected
; 0000 015B     TCCR0A=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 015C     TCCR0B=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 015D     TCNT0=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 015E     OCR0A=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 015F     OCR0B=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0160 
; 0000 0161    // Timer/Counter 1 initialization
; 0000 0162     // Clock source: System Clock
; 0000 0163     // Clock value: 10,800 kHz
; 0000 0164     // Mode: Normal top=0xFFFF
; 0000 0165     // OC1A output: Discon.
; 0000 0166     // OC1B output: Discon.
; 0000 0167     // OC1C output: Discon.
; 0000 0168     // Noise Canceler: Off
; 0000 0169     // Input Capture on Falling Edge
; 0000 016A     // Timer1 Overflow Interrupt: On
; 0000 016B     // Input Capture Interrupt: Off
; 0000 016C     // Compare A Match Interrupt: Off
; 0000 016D     // Compare B Match Interrupt: Off
; 0000 016E     // Compare C Match Interrupt: Off
; 0000 016F     TCCR1A=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0170     TCCR1B=0x05;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0171     TCNT1H=0xAB;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0172     TCNT1L=0xA1;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0173     ICR1H=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0174     ICR1L=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0175     OCR1AH=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0176     OCR1AL=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0177     OCR1BH=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0178     OCR1BL=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0179     OCR1CH=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 017A     OCR1CL=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 017B 
; 0000 017C     // Timer/Counter 2 initialization
; 0000 017D     // Clock source: System Clock
; 0000 017E     // Clock value: Timer2 Stopped
; 0000 017F     // Mode: Normal top=0xFF
; 0000 0180     // OC2A output: Disconnected
; 0000 0181     // OC2B output: Disconnected
; 0000 0182     ASSR=0x00;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0183     TCCR2A=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0184     TCCR2B=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0185     TCNT2=0x00;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0186     OCR2A=0x00;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0187     OCR2B=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0188 
; 0000 0189     // Timer/Counter 3 initialization
; 0000 018A     // Clock source: System Clock
; 0000 018B     // Clock value: 10,800 kHz
; 0000 018C     // Mode: Normal top=0xFFFF
; 0000 018D     // OC3A output: Discon.
; 0000 018E     // OC3B output: Discon.
; 0000 018F     // OC3C output: Discon.
; 0000 0190     // Noise Canceler: Off
; 0000 0191     // Input Capture on Falling Edge
; 0000 0192     // Timer3 Overflow Interrupt: On
; 0000 0193     // Input Capture Interrupt: Off
; 0000 0194     // Compare A Match Interrupt: Off
; 0000 0195     // Compare B Match Interrupt: Off
; 0000 0196     // Compare C Match Interrupt: Off
; 0000 0197     TCCR3A=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0198     TCCR3B=0x05;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0199     TCNT3H=0x2D;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 019A     TCNT3L=0x0F;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 019B     ICR3H=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 019C     ICR3L=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 019D     OCR3AH=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 019E     OCR3AL=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 019F     OCR3BH=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 01A0     OCR3BL=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 01A1     OCR3CH=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 01A2     OCR3CL=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 01A3 
; 0000 01A4     // Timer/Counter 4 initialization
; 0000 01A5     // Clock source: System Clock
; 0000 01A6     // Clock value: Timer4 Stopped
; 0000 01A7     // Mode: Normal top=0xFFFF
; 0000 01A8     // OC4A output: Discon.
; 0000 01A9     // OC4B output: Discon.
; 0000 01AA     // OC4C output: Discon.
; 0000 01AB     // Noise Canceler: Off
; 0000 01AC     // Input Capture on Falling Edge
; 0000 01AD     // Timer4 Overflow Interrupt: Off
; 0000 01AE     // Input Capture Interrupt: Off
; 0000 01AF     // Compare A Match Interrupt: Off
; 0000 01B0     // Compare B Match Interrupt: Off
; 0000 01B1     // Compare C Match Interrupt: Off
; 0000 01B2     TCCR4A=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 01B3     TCCR4B=0x05;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 01B4     TCNT4H=0xD2;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 01B5     TCNT4L=0x3A;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 01B6     ICR4H=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 01B7     ICR4L=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 01B8     OCR4AH=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 01B9     OCR4AL=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 01BA     OCR4BH=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 01BB     OCR4BL=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 01BC     OCR4CH=0x00;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 01BD     OCR4CL=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 01BE 
; 0000 01BF     // Timer/Counter 5 initialization
; 0000 01C0     // Clock source: System Clock
; 0000 01C1     // Clock value: Timer5 Stopped
; 0000 01C2     // Mode: Normal top=0xFFFF
; 0000 01C3     // OC5A output: Discon.
; 0000 01C4     // OC5B output: Discon.
; 0000 01C5     // OC5C output: Discon.
; 0000 01C6     // Noise Canceler: Off
; 0000 01C7     // Input Capture on Falling Edge
; 0000 01C8     // Timer5 Overflow Interrupt: Off
; 0000 01C9     // Input Capture Interrupt: Off
; 0000 01CA     // Compare A Match Interrupt: Off
; 0000 01CB     // Compare B Match Interrupt: Off
; 0000 01CC     // Compare C Match Interrupt: Off
; 0000 01CD     TCCR5A=0x00;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 01CE     TCCR5B=0x00;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 01CF     TCNT5H=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 01D0     TCNT5L=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 01D1     ICR5H=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 01D2     ICR5L=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 01D3     OCR5AH=0x00;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 01D4     OCR5AL=0x00;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 01D5     OCR5BH=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 01D6     OCR5BL=0x00;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 01D7     OCR5CH=0x00;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 01D8     OCR5CL=0x00;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 01D9 
; 0000 01DA     // External Interrupt(s) initialization
; 0000 01DB     // INT0: Off
; 0000 01DC     // INT1: Off
; 0000 01DD     // INT2: Off
; 0000 01DE     // INT3: Off
; 0000 01DF     // INT4: Off
; 0000 01E0     // INT5: Off
; 0000 01E1     // INT6: Off
; 0000 01E2     // INT7: Off
; 0000 01E3     EICRA=0x00;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 01E4     EICRB=0x00;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 01E5     EIMSK=0x00;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 01E6     // PCINT0 interrupt: Off
; 0000 01E7     // PCINT1 interrupt: Off
; 0000 01E8     // PCINT2 interrupt: Off
; 0000 01E9     // PCINT3 interrupt: Off
; 0000 01EA     // PCINT4 interrupt: Off
; 0000 01EB     // PCINT5 interrupt: Off
; 0000 01EC     // PCINT6 interrupt: Off
; 0000 01ED     // PCINT7 interrupt: Off
; 0000 01EE     // PCINT8 interrupt: Off
; 0000 01EF     // PCINT9 interrupt: Off
; 0000 01F0     // PCINT10 interrupt: Off
; 0000 01F1     // PCINT11 interrupt: Off
; 0000 01F2     // PCINT12 interrupt: Off
; 0000 01F3     // PCINT13 interrupt: Off
; 0000 01F4     // PCINT14 interrupt: Off
; 0000 01F5     // PCINT15 interrupt: Off
; 0000 01F6     // PCINT16 interrupt: Off
; 0000 01F7     // PCINT17 interrupt: Off
; 0000 01F8     // PCINT18 interrupt: Off
; 0000 01F9     // PCINT19 interrupt: Off
; 0000 01FA     // PCINT20 interrupt: Off
; 0000 01FB     // PCINT21 interrupt: Off
; 0000 01FC     // PCINT22 interrupt: Off
; 0000 01FD     // PCINT23 interrupt: Off
; 0000 01FE     PCMSK0=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 01FF     PCMSK1=0x00;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0200     PCMSK2=0x00;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0201     PCICR=0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0202 
; 0000 0203     // Timer/Counter 0 Interrupt(s) initialization
; 0000 0204     TIMSK0=0x00;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0205 
; 0000 0206     // Timer/Counter 1 Interrupt(s) initialization
; 0000 0207     TIMSK1=0x01;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0208 
; 0000 0209     // Timer/Counter 2 Interrupt(s) initialization
; 0000 020A     TIMSK2=0x00;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 020B 
; 0000 020C     // Timer/Counter 3 Interrupt(s) initialization
; 0000 020D     TIMSK3=0x01;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 020E 
; 0000 020F     // Timer/Counter 4 Interrupt(s) initialization
; 0000 0210     TIMSK4=0x01;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0211 
; 0000 0212     // Timer/Counter 5 Interrupt(s) initialization
; 0000 0213     TIMSK5=0x00;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0214 
; 0000 0215     // USART0 initialization
; 0000 0216     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0217     // USART0 Receiver: On
; 0000 0218     // USART0 Transmitter: On
; 0000 0219     // USART0 Mode: Asynchronous
; 0000 021A     // USART0 Baud Rate: 9600
; 0000 021B     UCSR0A=0x00;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 021C     UCSR0B=0x98;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 021D     UCSR0C=0x06;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 021E     UBRR0H=0x00;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 021F     UBRR0L=0x47;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0220 
; 0000 0221     // USART1 initialization
; 0000 0222     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0223     // USART1 Receiver: On
; 0000 0224     // USART1 Transmitter: On
; 0000 0225     // USART1 Mode: Asynchronous
; 0000 0226     // USART1 Baud Rate: 9600
; 0000 0227     UCSR1A=0x00;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0228     UCSR1B=0x98;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0229     UCSR1C=0x06;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 022A     UBRR1H=0x00;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 022B     UBRR1L=0x47;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 022C 
; 0000 022D     // USART2 initialization
; 0000 022E     // USART2 disabled
; 0000 022F     UCSR2B=0x00;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0230 
; 0000 0231     // USART3 initialization
; 0000 0232     // USART3 disabled
; 0000 0233     UCSR3B=0x00;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0234 
; 0000 0235     // Analog Comparator initialization
; 0000 0236     // Analog Comparator: Off
; 0000 0237     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0238     ACSR=0x80;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0239     ADCSRB=0x00;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 023A     DIDR1=0x00;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 023B 
; 0000 023C     // ADC initialization
; 0000 023D     // ADC disabled
; 0000 023E     ADCSRA=0x00;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 023F 
; 0000 0240     // SPI initialization
; 0000 0241     // SPI disabled
; 0000 0242     SPCR=0x00;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0243 
; 0000 0244     // TWI initialization
; 0000 0245     // TWI disabled
; 0000 0246     TWCR=0x00;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0247 
; 0000 0248     // Alphanumeric LCD initialization
; 0000 0249     // Connections are specified in the
; 0000 024A     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 024B     // RS - PORTJ Bit 0
; 0000 024C     // RD - PORTJ Bit 1
; 0000 024D     // EN - PORTJ Bit 2
; 0000 024E     // D4 - PORTJ Bit 4
; 0000 024F     // D5 - PORTJ Bit 5
; 0000 0250     // D6 - PORTJ Bit 6
; 0000 0251     // D7 - PORTJ Bit 7
; 0000 0252     // Characters/line: 20
; 0000 0253     lcd_init(20);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0254 
; 0000 0255     // Global enable interrupts
; 0000 0256     #asm("sei")
;PCODE: $000001C6 VOL: 0
	sei
;PCODE: $000001C7 VOL: 0
; 0000 0257 }
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;
;/**
;* Mencari substring pada suatu string
;*
;* @param str1 : char buffer tempat substring akan dicari
;* @param str2 : substring yang ingin dicari dari suatu string/char buffer
;*
;* @return true jika ketemu, false jika tidak
;*/
;bool isFound(char *str1,char *str2)
; 0000 0262 {
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0263     if (strstr(str1,str2)) return true;
;PCODE: $000001CC VOL: 0
;	*str1 -> Y+2
;	*str2 -> Y+0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0264     else return false;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0265 }
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;
;/**
;* Memperoleh index char setelah substring yang dicari pada array char
;*
;* @param str1 : char buffer tempat substring akan dicari
;* @param str2 : substring yang ingin dicari dari suatu string/char buffer
;*
;* @return nilai index jika substring ada, -1 jika tidak
;*/
;int getIndexAfterward(char * str1 , char * str2)
; 0000 0270 {
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0271     if (strstr(str1,str2)) return ((strstr(str1,str2) - str1) + strlen(str2));
;PCODE: $000001E0 VOL: 0
;	*str1 -> Y+2
;	*str2 -> Y+0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0272     else return -1;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0273 }
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;
;/**
;* char to integer
;*
;* @param word : satu karakter saja, angka
;* @return angka dalam integer
;*/
;int toInt(char word)
; 0000 027C {
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 027D     return (word - '0');
;PCODE: $000001FE VOL: 0
;	word -> Y+0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 027E }
;PCODE: $00000204 VOL: 0
;
;/**
;* memperoleh ukuran pesan yang masuk
;*
;* @param word : satu karakter saja, angka
;* @return angka dalam integer, kalo gada -1
;*/
;int getDataSize(char * buf)
; 0000 0287 {
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0288     //data yang masuk akan mendapatkan +IPD sebagai headernya
; 0000 0289     if (isFound(buf,"+IPD,"))
;PCODE: $00000207 VOL: 0
;	*buf -> Y+0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 028A     {
; 0000 028B         int indexConnectionId = getIndexAfterward(buf,"+IPD,");
; 0000 028C         int ribuan, ratusan, puluhan, satuan, total, offset=1;
; 0000 028D         char dataSize[4];
; 0000 028E 
; 0000 028F         //formatnya adalah seperti ini
; 0000 0290         //+IPD,1,123:
; 0000 0291         //1 adalah koneksi dari channel 1
; 0000 0292         //123 artinya 123 byte.
; 0000 0293         //untuk mengetahui besarnya ukuran, digunakan offset dari lokasi header
; 0000 0294         do
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;	*buf -> Y+18
;	indexConnectionId -> Y+16
;	ribuan -> Y+14
;	ratusan -> Y+12
;	puluhan -> Y+10
;	satuan -> Y+8
;	total -> Y+6
;	offset -> Y+4
;	dataSize -> Y+0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0295         {
; 0000 0296             offset++;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0297             dataSize[offset-2] = buf[indexConnectionId+offset];
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0298         }
; 0000 0299         while (dataSize[offset-2] != ':'); //berhenti sebelum tanda titik 2
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 029A 
; 0000 029B         //dari besar offset dapat diketahui jumlah digit data yang masuk
; 0000 029C         if (offset==6)
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 029D         {
; 0000 029E             ribuan =  toInt(dataSize[0]) * 1000;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 029F             ratusan = toInt(dataSize[1]) * 100;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 02A0             puluhan = toInt(dataSize[2]) * 10;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 02A1             satuan = toInt(dataSize[3]);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 02A2             total = ribuan+ratusan+puluhan+satuan;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 02A3         }
; 0000 02A4         else if (offset==5)
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 02A5         {
; 0000 02A6             ratusan = toInt(dataSize[0]) * 100;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 02A7             puluhan = toInt(dataSize[1]) * 10;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 02A8             satuan = toInt(dataSize[2]);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 02A9             total = ratusan+puluhan+satuan;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 02AA         }
; 0000 02AB         else if (offset==4)
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 02AC         {
; 0000 02AD             puluhan = toInt(dataSize[0]) * 10;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 02AE             satuan = toInt(dataSize[1]);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 02AF             total = puluhan+satuan;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 02B0         }
; 0000 02B1         else if (offset==3)
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 02B2         {
; 0000 02B3             satuan = toInt(dataSize[0]);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 02B4             total = satuan;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 02B5         }
; 0000 02B6         return total;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 02B7     }
;PCODE: $0000028D VOL: 0
; 0000 02B8     else return -1;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 02B9 }
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0

	.DSEG
_0x30:
	.BYTE 0xC
;
;/* belum kepake
;bool sendAndWait(char * command , char * response, int timeout, bool debug)
;{
;    char data[CUSTOM_BUFFER_SIZE];
;    bool received = true;
;
;    usartOutput = USART0;
;    printf("%s\r\n",command);
;
;    while(1)
;    {
;        if (serial0Available)
;        {
;            data[i] = getchar();
;            if (debug)
;            {
;                usartOutput = USART1;
;                putchar1(data[i]);
;            }
;            received = true;
;            count = 0;
;            i++;
;        }
;
;        if ((count>=timeout) && (received))
;        {
;            received = false;
;
;            for (j=i;j<CUSTOM_BUFFER_SIZE;j++)
;            {
;                data[j]=NULL;
;            }
;
;            i=0;
;
;            if (isFound(data,response))
;            {
;                if (debug)
;                {
;                    usartOutput = USART1;
;                    printf("Response Matched");
;                }
;                return true;
;            }
;            else
;            {
;                if (debug)
;                {
;                    usartOutput = USART1;
;                    printf("Response Mismatched");
;                }
;                return false;
;            }
;        }
;    }
;}
;*/
;
;/**
;* Clear Buffer
;* mengembalikan semua index ke 0, dan mereset semua nilai pada buffernya jadi null
;*/
;void clearBuffer()
; 0000 02FA {

	.CSEG
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 02FB     unsigned char temp;
; 0000 02FC     for (temp=0;temp<RX_BUFFER_SIZE0; temp++) rx_buffer0[temp]=NULL;
;PCODE: $00000298 VOL: 0
;	temp -> R17
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 02FD for (temp=0;temp<32; temp++) rx_buffer1[temp]=0;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 02FE rx_wr_index0=0;
;PCODE: $000002BF VOL: 0
; 0000 02FF     rx_rd_index0=0;
;PCODE: $000002C0 VOL: 0
; 0000 0300     serial0Available=0;
;PCODE: $000002C1 VOL: 0
; 0000 0301     rx_wr_index1=0;
;PCODE: $000002C2 VOL: 0
; 0000 0302     rx_rd_index1=0;
;PCODE: $000002C3 VOL: 0
; 0000 0303     serial1Available=0;
;PCODE: $000002C4 VOL: 0
; 0000 0304 }
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;
;void toggleLed()
; 0000 0307 {
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0308     //PORTL ^= 1 << 7;
; 0000 0309 }
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;
;void updateConnection()
; 0000 030C {
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 030D     lcd_clear();
;PCODE: $000002CE VOL: 0
; 0000 030E     lcd_gotoxy(0,1);
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 030F     lcd_putsf("UPDATE");
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0310     if (!busy && afterReset>1)
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0311     {
; 0000 0312         battery++;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0313         if (battery > 100)  battery=0;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0314 
; 0000 0315         lcd_gotoxy(7,1);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0316         lcd_putsf("OK");
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0317 
; 0000 0318         setting = true;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0319         usartOutput=USART0;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 031A         printf("AT+CIPMUX=1\r\n");
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 031B         delay_ms(100);
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 031C         printf("AT+CIPSERVER=1,80\r\n");
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 031D         delay_ms(250);
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 031E         setting = false;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 031F     }
; 0000 0320     else
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0321     {
; 0000 0322         lcd_gotoxy(7,1);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0323         lcd_putsf("NO");
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 0324     }
;PCODE: $00000314 VOL: 0
; 0000 0325 }
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;
;void sendStatus()
; 0000 0328 {
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0329     lcd_clear();
;PCODE: $00000319 VOL: 0
; 0000 032A     lcd_gotoxy(0,1);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 032B     lcd_putsf("STATUS");
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 032C     if (!setting && afterReset>1)
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 032D    {
; 0000 032E         lcd_gotoxy(7,1);
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 032F         lcd_putsf("OK");
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0330         busy = true;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 0331         usartOutput=USART0;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0332         printf("AT+CIPSTART=4,\"TCP\",\"192.168.0.250\",80\r\n");
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 0333         delay_ms(500);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0334         printf("AT+CIPSEND=4,33\r\n");
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 0335         delay_ms(500);
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0336         printf("GET /AGV/setAll/%d/%d/%d/%d/%d/%d/%d\r\n",id,connected,motor,signals,battery,position,obstacle);
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 0337         delay_ms(500);
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 0338         busy = false;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0339    }
; 0000 033A    else
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 033B    {
; 0000 033C       lcd_gotoxy(7,1);
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 033D         lcd_putsf("NO");
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 033E    }
;PCODE: $00000370 VOL: 0
; 0000 033F }
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;
;void resetModule()
; 0000 0342 {
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0343     afterReset=0;
;PCODE: $00000375 VOL: 0
; 0000 0344     lcd_clear();
;PCODE: $00000376 VOL: 0
; 0000 0345     lcd_gotoxy(0,1);
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 0346     lcd_putsf("RESETS");
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 0347     delay_ms(1000);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0348     if (!setting && !busy)
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 0349    {
; 0000 034A         lcd_gotoxy(7,1);
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 034B         lcd_putsf("OK");
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 034C         usartOutput=USART0;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 034D         printf("AT+RST\r\n");
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 034E    }
; 0000 034F    else
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 0350    {
; 0000 0351         lcd_gotoxy(7,1);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 0352         lcd_putsf("NO");
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 0353    }
;PCODE: $000003A3 VOL: 0
; 0000 0354 }
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;
;void main(void)
; 0000 0357 {
;PCODE: $000003A6 VOL: 0
; 0000 0358     bool received = false, debug=false;
; 0000 0359     char data[CUSTOM_BUFFER_SIZE];
; 0000 035A     int indexConnectionId, indexCommand, connectionId, command, incomingSize, offset, len;
; 0000 035B 
; 0000 035C     //contoh data yang akan dikirim ke client, kalau ada yang ngirim data ke ESP8266 nya
; 0000 035D     char send[] = "<title>AGV</title><h1>AGV Project</h1><h2>Client #1</h2><button>Test Button 1</button>";
; 0000 035E 
; 0000 035F     initAll();
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;	received -> R17
;	debug -> R16
;	data -> Y+97
;	indexConnectionId -> R18,R19
;	indexCommand -> R20,R21
;	connectionId -> Y+95
;	command -> Y+93
;	incomingSize -> Y+91
;	offset -> Y+89
;	len -> Y+87
;	send -> Y+0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0360 
; 0000 0361     lcd_putsf("test");
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 0362     lcd_gotoxy(0,1);
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0363     lcd_putsf("test");
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 0364     lcd_gotoxy(0,2);
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 0365     lcd_putsf("test");
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 0366     lcd_gotoxy(0,3);
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0367     lcd_putsf("test");
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 0368 
; 0000 0369    // usartOutput=USART0;
; 0000 036A    // printf("AT+CIPSTART=4,\"TCP\",\"192.168.0.250\",80\r\n");
; 0000 036B    // delay_ms(300);
; 0000 036C 
; 0000 036D     while(1)
;PCODE: $000003C9 VOL: 0
; 0000 036E     {
; 0000 036F         //lcd_gotoxy(0,3);
; 0000 0370         //itoa(afterReset,lcd);
; 0000 0371         //lcd_puts(lcd);
; 0000 0372 
; 0000 0373         //setiap menerima input tidak akan terperangkap dalam close loop di dalam if ini,
; 0000 0374         //meskipun menggunakan while juga sama, jadi pakai if saja
; 0000 0375         if (serial0Available)
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 0376         {
; 0000 0377             busy = true;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 0378             received = true;
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0379             count = 0;
;PCODE: $000003D0 VOL: 0
; 0000 037A 
; 0000 037B             //Selama dapat command dari luar (USART1),
; 0000 037C             //output respon ESP8266 di USART0 akan di verbose ke USART1 lagi
; 0000 037D             if (debug)
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 037E             {
; 0000 037F                 usartOutput = USART1;
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0380                 putchar1(getchar());
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 0381             }
; 0000 0382             //jika command bukan dari luar, respon dari ESP8266 akan dianggap sebagai input
; 0000 0383             //dan disimpan di buffer
; 0000 0384             else
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 0385             {
; 0000 0386                 usartOutput = USART0;
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 0387                 data[i] = getchar();
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 0388                 i++;
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0389             }
;PCODE: $000003E6 VOL: 0
; 0000 038A         }
; 0000 038B 
; 0000 038C         //Setelah tidak ada input dalam beberapa saat, akan masuk ke if ini
; 0000 038D         //agar data dapat diproses
; 0000 038E         if ((count>0) && (received) && (!debug))
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0000 038F         {
; 0000 0390             //data sudah di custom buffer, reset internal buffer ke null
; 0000 0391             clearBuffer();
;PCODE: $000003F2 VOL: 0
; 0000 0392             busy = false;
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 0393             received = false;
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0394 
; 0000 0395             i=0;
;PCODE: $000003F7 VOL: 0
; 0000 0396             if (isFound(data,"+IPD,"))
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0397             {
; 0000 0398                 usartOutput = USART1;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0399                 indexConnectionId = getIndexAfterward(data,"+IPD,");
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 039A                 connectionId =  toInt(data[indexConnectionId]);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 039B 
; 0000 039C                 incomingSize = getDataSize(data);
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 039D 
; 0000 039E                 //contoh command sederhana, custom tergantung dari web nya
; 0000 039F                 if (isFound(data,"cmd="))
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 03A0                 {
; 0000 03A1                     indexCommand = getIndexAfterward(data,"cmd=");
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 03A2                     command = toInt(data[indexCommand]);
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 03A3 
; 0000 03A4 
; 0000 03A5 
; 0000 03A6 
; 0000 03A7                     if (command == 0)
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 03A8                     {
; 0000 03A9                         lcd_clear();
;PCODE: $00000424 VOL: 0
; 0000 03AA                         lcd_putsf("OFF");
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 03AB                         motor = 0;
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 03AC                         PORTL = 0x00;
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 03AD                     }
; 0000 03AE                     else if (command == 1)
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 03AF                     {
; 0000 03B0                         lcd_clear();
;PCODE: $00000431 VOL: 0
; 0000 03B1                         lcd_putsf("ON");
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 03B2                         motor = 1;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 03B3                         PORTL = 0xff;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 03B4                     }
; 0000 03B5 
; 0000 03B6                     clearBuffer();  //jaga2, clear lagi aja
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 03B7                 }
; 0000 03B8                 else
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 03B9                 {
; 0000 03BA                     printf("\r\n\n%d BYTE OF DATA FROM CHANNEL %d\r\n",incomingSize,connectionId);
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 03BB 
; 0000 03BC                     if (incomingSize>999) offset = 6;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 03BD                     else if (incomingSize>99) offset = 5;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 03BE                     else if (incomingSize>9) offset = 4;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 03BF                     else offset = 3;
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 03C0 
; 0000 03C1                     printf("\r\n/***BEGINNING OF THE DATA***/\r\n");
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 03C2 
; 0000 03C3                     do
;PCODE: $0000046C VOL: 0
; 0000 03C4                     {
; 0000 03C5                         offset++;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 03C6                         putchar1(data[indexConnectionId+offset]);
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 03C7                     }
; 0000 03C8                     while (offset<incomingSize+3);
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 03C9 
; 0000 03CA                     printf("\r\n/***END OF THE DATA***/\r\n");
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 03CB 
; 0000 03CC                     len = strlen(send);
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 03CD 
; 0000 03CE                     usartOutput=USART0;
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 03CF 
; 0000 03D0                     //untuk kirim balik data
; 0000 03D1                     printf("AT+CIPSEND=%d,%d\r\n",connectionId,len);
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 03D2                     delay_ms(100);
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 03D3                     printf("%s\r\n",send);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 03D4                     delay_ms(100);
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0000 03D5                 }
;PCODE: $000004A8 VOL: 0
; 0000 03D6 
; 0000 03D7                 //setelah terjadi koneksi, tutup koneksi dengan AT+CIPCLOSE
; 0000 03D8                 usartOutput=USART0;
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 03D9                 printf("AT+CIPCLOSE=%d\r\n",connectionId);
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 03DA                 delay_ms(100);
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 03DB                 printf("AT+CIPCLOSE=%d\r\n",connectionId);
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 03DC                 delay_ms(100);
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 03DD             }
; 0000 03DE         }
;PCODE: $000004C5 VOL: 0
; 0000 03DF 
; 0000 03E0         //jika sebelumnya ada data dari luar (USART1), kembalikan flag ke default (matikan debug mode)
; 0000 03E1         if ((count>0) && (received) && (debug))
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 03E2         {
; 0000 03E3             debug = false;
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 03E4             usartOutput=USART0;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 03E5         }
; 0000 03E6 
; 0000 03E7         //jika terdapat input dari luar (USART1), aktifkan debug
; 0000 03E8         if(serial1Available)
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 03E9         {
; 0000 03EA             debug = true;
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 03EB             usartOutput=USART0;
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 03EC             putchar(getchar1());
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 03ED         }
; 0000 03EE     }
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 03EF }
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0

	.DSEG
_0x5A:
	.BYTE 0x16
