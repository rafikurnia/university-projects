/*****************************************************
Project : AGV Project - ESP8266
Version : 1.0 
Date    : 07/07/2015
Author  : Rafi Kurnia Putra
Company : Universitas Indonesia
Comments: + Filter data
          + USART0(esp8266) and USART1(debug) are usable 
          + Timer to Interrupt Routine
          
Chip type               : ATmega2560
Program type            : Application
AVR Core Clock frequency: 8,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 4096
*****************************************************/

#include <mega2560.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <alcd.h>
#include <delay.h>

#ifndef RXB8
#define RXB8 1
#endif

#ifndef TXB8
#define TXB8 0
#endif

#ifndef UPE
#define UPE 2
#endif

#ifndef DOR
#define DOR 3
#endif

#ifndef FE
#define FE 4
#endif

#ifndef UDRE
#define UDRE 5
#endif

#ifndef RXC
#define RXC 7
#endif

#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<DOR)
#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)

//Untuk menggunakan printf untuk lebih dari 1 usart
#define _ALTERNATE_PUTCHAR_
#define CUSTOM_BUFFER_SIZE 2048     //ukuran buffer untuk tampung data sebelum diproses
#define USART0 0
#define USART1 1

#define IPADDR 192.168.0.250

// USART0 Receiver buffer -> sedikit modifikasi nama variable
#define RX_BUFFER_SIZE0 32
#if RX_BUFFER_SIZE0 <= 256
unsigned char rx_wr_index0,rx_rd_index0,serial0Available;
#else
unsigned int rx_wr_index0,rx_rd_index0,serial0Available;
#endif
char rx_buffer0[RX_BUFFER_SIZE0];

// USART1 Receiver buffer
#define RX_BUFFER_SIZE1 32
#if RX_BUFFER_SIZE1 <= 256
unsigned char rx_wr_index1,rx_rd_index1,serial1Available;
#else
unsigned int rx_wr_index1,rx_rd_index1,serial1Available;
#endif
char rx_buffer1[RX_BUFFER_SIZE1];

// This flag is set on USART0 Receiver buffer overflow
bit rx_buffer_overflow0;

// This flag is set on USART1 Receiver buffer overflow
bit rx_buffer_overflow1;

// Global Variables
int i,count=0,afterReset=0;

// Status Attributes
const int id=1;
bool connected=1;
bool motor=1;
int signals=11;
int battery=87;
int position=3;
bool obstacle=0;

//variable untuk menentukan output usart yang akan dituju
//harus diubah setiap mengganti output
unsigned char usartOutput = USART1; 
bool busy = false;
bool setting = false;

void toggleLed();
void updateConnection();
void sendStatus();
void resetModule();

// USART0 Receiver interrupt service routine
interrupt [USART0_RXC] void usart0_rx_isr(void)
{
    char status,data;
    status=UCSR0A;
    data=UDR0;
    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
    {
        rx_buffer0[rx_wr_index0++]=data;
        #if RX_BUFFER_SIZE0 == 256
        // special case for receiver buffer size=256
        if (++rx_counter0 == 0) rx_buffer_overflow0=1;
        #else
        if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
        if (++serial0Available == RX_BUFFER_SIZE0)
        {
            serial0Available=0;
            rx_buffer_overflow0=1;
        }
        #endif
    }
}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART0 Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
    char data;
    while (serial0Available==0);
    data=rx_buffer0[rx_rd_index0++];
    #if RX_BUFFER_SIZE0 != 256
    if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
    #endif
    #asm("cli")
    --serial0Available;
    #asm("sei")
    return data;
}
#pragma used-
#endif

//Putchar custom, untuk diintegrasikan dengan printf
void putchar(char c)
{
    switch (usartOutput)
    {
        case USART0: // the output will be directed to USART0
            while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
            UDR0=c;
            break;

        case USART1: // the output will be directed to USART1
            while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
            UDR1=c;
            break;      
    }
}

// USART1 Receiver interrupt service routine
interrupt [USART1_RXC] void usart1_rx_isr(void)
{
    char status,data;
    status=UCSR1A;
    data=UDR1;
    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
    {
        rx_buffer1[rx_wr_index1++]=data;
        #if RX_BUFFER_SIZE1 == 256
        // special case for receiver buffer size=256
        if (++rx_counter1 == 0) rx_buffer_overflow1=1;
        #else
        if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
        if (++serial1Available == RX_BUFFER_SIZE1)
        {
            serial1Available=0;
            rx_buffer_overflow1=1;
        }
        #endif
    }
}

// Get a character from the USART1 Receiver buffer
#pragma used+
char getchar1(void)
{
    char data;
    while (serial1Available==0);
    data=rx_buffer1[rx_rd_index1++];
    #if RX_BUFFER_SIZE1 != 256
    if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
    #endif
    #asm("cli")
    --serial1Available;
    #asm("sei")
    return data;
}
#pragma used-

// Write a character to the USART1 Transmitter
#pragma used+
void putchar1(char c)
{
    while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
    UDR1=c;
}
#pragma used-

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
    // Reinitialize Timer1 value
    TCNT1H=0xABA1 >> 8;
    TCNT1L=0xABA1 & 0xff;                    
    //timer untuk counting jeda waktu setelah data diterima sebelum diproses    
    
    afterReset++;

    if (afterReset>10) resetModule();
    
    toggleLed();
    updateConnection(); 
                    
    
}

// Timer3 overflow interrupt service routine
interrupt [TIM3_OVF] void timer3_ovf_isr(void)
{
    // Reinitialize Timer3 value
    TCNT3H=0x2D0F >> 8;
    TCNT3L=0x2D0F & 0xff;


    sendStatus();  
}

// Timer4 overflow interrupt service routine
interrupt [TIM4_OVF] void timer4_ovf_isr(void)
{
    // Reinitialize Timer4 value
    TCNT3H=0xDDDD >> 8;
    TCNT3L=0xDDDD & 0xff;

    count++;
}

void initAll()
{
    // Crystal Oscillator division factor: 1
    #pragma optsize-
    CLKPR=0x80;
    CLKPR=0x00;
    #ifdef _OPTIMIZE_SIZE_
    #pragma optsize+
    #endif

    // Input/Output Ports initialization
    // Port A initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTA=0x00;
    DDRA=0x00;

    // Port B initialization
    // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=0 State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTB=0x00;
    DDRB=0x80;

    // Port C initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTC=0x00;
    DDRC=0x00;

    // Port D initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTD=0x00;
    DDRD=0x00;

    // Port E initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTE=0x00;
    DDRE=0x00;

    // Port F initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTF=0x00;
    DDRF=0x00;

    // Port G initialization
    // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTG=0x00;
    DDRG=0x00;

    // Port H initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTH=0x00;
    DDRH=0x00;

    // Port J initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTJ=0x00;
    DDRJ=0x00;

    // Port K initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTK=0x00;
    DDRK=0x00;

    // Port L initialization
    // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out 
    // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0 
    PORTL=0x00;
    DDRL=0xFF;

    // Timer/Counter 0 initialization
    // Clock source: System Clock
    // Clock value: Timer 0 Stopped
    // Mode: Normal top=0xFF
    // OC0A output: Disconnected
    // OC0B output: Disconnected
    TCCR0A=0x00;
    TCCR0B=0x00;
    TCNT0=0x00;
    OCR0A=0x00;
    OCR0B=0x00;

   // Timer/Counter 1 initialization
    // Clock source: System Clock
    // Clock value: 10,800 kHz
    // Mode: Normal top=0xFFFF
    // OC1A output: Discon.
    // OC1B output: Discon.
    // OC1C output: Discon.
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer1 Overflow Interrupt: On
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: Off
    // Compare B Match Interrupt: Off
    // Compare C Match Interrupt: Off
    TCCR1A=0x00;
    TCCR1B=0x05;
    TCNT1H=0xAB;
    TCNT1L=0xA1;
    ICR1H=0x00;
    ICR1L=0x00;
    OCR1AH=0x00;
    OCR1AL=0x00;
    OCR1BH=0x00;
    OCR1BL=0x00;
    OCR1CH=0x00;
    OCR1CL=0x00;

    // Timer/Counter 2 initialization
    // Clock source: System Clock
    // Clock value: Timer2 Stopped
    // Mode: Normal top=0xFF
    // OC2A output: Disconnected
    // OC2B output: Disconnected
    ASSR=0x00;
    TCCR2A=0x00;
    TCCR2B=0x00;
    TCNT2=0x00;
    OCR2A=0x00;
    OCR2B=0x00;

    // Timer/Counter 3 initialization
    // Clock source: System Clock
    // Clock value: 10,800 kHz
    // Mode: Normal top=0xFFFF
    // OC3A output: Discon.
    // OC3B output: Discon.
    // OC3C output: Discon.
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer3 Overflow Interrupt: On
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: Off
    // Compare B Match Interrupt: Off
    // Compare C Match Interrupt: Off
    TCCR3A=0x00;
    TCCR3B=0x05;
    TCNT3H=0x2D;
    TCNT3L=0x0F;
    ICR3H=0x00;
    ICR3L=0x00;
    OCR3AH=0x00;
    OCR3AL=0x00;
    OCR3BH=0x00;
    OCR3BL=0x00;
    OCR3CH=0x00;
    OCR3CL=0x00;

    // Timer/Counter 4 initialization
    // Clock source: System Clock
    // Clock value: Timer4 Stopped
    // Mode: Normal top=0xFFFF
    // OC4A output: Discon.
    // OC4B output: Discon.
    // OC4C output: Discon.
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer4 Overflow Interrupt: Off
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: Off
    // Compare B Match Interrupt: Off
    // Compare C Match Interrupt: Off
    TCCR4A=0x00;
    TCCR4B=0x05;
    TCNT4H=0xD2;
    TCNT4L=0x3A;
    ICR4H=0x00;
    ICR4L=0x00;
    OCR4AH=0x00;
    OCR4AL=0x00;
    OCR4BH=0x00;
    OCR4BL=0x00;
    OCR4CH=0x00;
    OCR4CL=0x00;

    // Timer/Counter 5 initialization
    // Clock source: System Clock
    // Clock value: Timer5 Stopped
    // Mode: Normal top=0xFFFF
    // OC5A output: Discon.
    // OC5B output: Discon.
    // OC5C output: Discon.
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer5 Overflow Interrupt: Off
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: Off
    // Compare B Match Interrupt: Off
    // Compare C Match Interrupt: Off
    TCCR5A=0x00;
    TCCR5B=0x00;
    TCNT5H=0x00;
    TCNT5L=0x00;
    ICR5H=0x00;
    ICR5L=0x00;
    OCR5AH=0x00;
    OCR5AL=0x00;
    OCR5BH=0x00;
    OCR5BL=0x00;
    OCR5CH=0x00;
    OCR5CL=0x00;

    // External Interrupt(s) initialization
    // INT0: Off
    // INT1: Off
    // INT2: Off
    // INT3: Off
    // INT4: Off
    // INT5: Off
    // INT6: Off
    // INT7: Off
    EICRA=0x00;
    EICRB=0x00;
    EIMSK=0x00;
    // PCINT0 interrupt: Off
    // PCINT1 interrupt: Off
    // PCINT2 interrupt: Off
    // PCINT3 interrupt: Off
    // PCINT4 interrupt: Off
    // PCINT5 interrupt: Off
    // PCINT6 interrupt: Off
    // PCINT7 interrupt: Off
    // PCINT8 interrupt: Off
    // PCINT9 interrupt: Off
    // PCINT10 interrupt: Off
    // PCINT11 interrupt: Off
    // PCINT12 interrupt: Off
    // PCINT13 interrupt: Off
    // PCINT14 interrupt: Off
    // PCINT15 interrupt: Off
    // PCINT16 interrupt: Off
    // PCINT17 interrupt: Off
    // PCINT18 interrupt: Off
    // PCINT19 interrupt: Off
    // PCINT20 interrupt: Off
    // PCINT21 interrupt: Off
    // PCINT22 interrupt: Off
    // PCINT23 interrupt: Off
    PCMSK0=0x00;
    PCMSK1=0x00;
    PCMSK2=0x00;
    PCICR=0x00;

    // Timer/Counter 0 Interrupt(s) initialization
    TIMSK0=0x00;

    // Timer/Counter 1 Interrupt(s) initialization
    TIMSK1=0x01;

    // Timer/Counter 2 Interrupt(s) initialization
    TIMSK2=0x00;

    // Timer/Counter 3 Interrupt(s) initialization
    TIMSK3=0x01;

    // Timer/Counter 4 Interrupt(s) initialization
    TIMSK4=0x01;

    // Timer/Counter 5 Interrupt(s) initialization
    TIMSK5=0x00;

    // USART0 initialization
    // Communication Parameters: 8 Data, 1 Stop, No Parity
    // USART0 Receiver: On
    // USART0 Transmitter: On
    // USART0 Mode: Asynchronous
    // USART0 Baud Rate: 9600
    UCSR0A=0x00;
    UCSR0B=0x98;
    UCSR0C=0x06;
    UBRR0H=0x00;
    UBRR0L=0x47;

    // USART1 initialization
    // Communication Parameters: 8 Data, 1 Stop, No Parity
    // USART1 Receiver: On
    // USART1 Transmitter: On
    // USART1 Mode: Asynchronous
    // USART1 Baud Rate: 9600
    UCSR1A=0x00;
    UCSR1B=0x98;
    UCSR1C=0x06;
    UBRR1H=0x00;
    UBRR1L=0x47;

    // USART2 initialization
    // USART2 disabled
    UCSR2B=0x00;

    // USART3 initialization
    // USART3 disabled
    UCSR3B=0x00;

    // Analog Comparator initialization
    // Analog Comparator: Off
    // Analog Comparator Input Capture by Timer/Counter 1: Off
    ACSR=0x80;
    ADCSRB=0x00;
    DIDR1=0x00;

    // ADC initialization
    // ADC disabled
    ADCSRA=0x00;

    // SPI initialization
    // SPI disabled
    SPCR=0x00;

    // TWI initialization
    // TWI disabled
    TWCR=0x00;

    // Alphanumeric LCD initialization
    // Connections are specified in the
    // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
    // RS - PORTJ Bit 0
    // RD - PORTJ Bit 1
    // EN - PORTJ Bit 2
    // D4 - PORTJ Bit 4
    // D5 - PORTJ Bit 5
    // D6 - PORTJ Bit 6
    // D7 - PORTJ Bit 7
    // Characters/line: 20
    lcd_init(20);

    // Global enable interrupts
    #asm("sei")
}

/**
* Mencari substring pada suatu string
*
* @param str1 : char buffer tempat substring akan dicari
* @param str2 : substring yang ingin dicari dari suatu string/char buffer
*
* @return true jika ketemu, false jika tidak
*/
bool isFound(char *str1,char *str2)
{
    if (strstr(str1,str2)) return true;
    else return false;
}

/**
* Memperoleh index char setelah substring yang dicari pada array char
*
* @param str1 : char buffer tempat substring akan dicari
* @param str2 : substring yang ingin dicari dari suatu string/char buffer
*
* @return nilai index jika substring ada, -1 jika tidak
*/
int getIndexAfterward(char * str1 , char * str2)
{
    if (strstr(str1,str2)) return ((strstr(str1,str2) - str1) + strlen(str2));
    else return -1;
}

/**
* char to integer
* 
* @param word : satu karakter saja, angka
* @return angka dalam integer
*/
int toInt(char word)
{
    return (word - '0');
}

/**
* memperoleh ukuran pesan yang masuk
* 
* @param word : satu karakter saja, angka
* @return angka dalam integer, kalo gada -1
*/
int getDataSize(char * buf)
{
    //data yang masuk akan mendapatkan +IPD sebagai headernya
    if (isFound(buf,"+IPD,"))
    {
        int indexConnectionId = getIndexAfterward(buf,"+IPD,");
        int ribuan, ratusan, puluhan, satuan, total, offset=1;
        char dataSize[4];
        
        //formatnya adalah seperti ini
        //+IPD,1,123:
        //1 adalah koneksi dari channel 1
        //123 artinya 123 byte.
        //untuk mengetahui besarnya ukuran, digunakan offset dari lokasi header            
        do
        {
            offset++;
            dataSize[offset-2] = buf[indexConnectionId+offset];
        }
        while (dataSize[offset-2] != ':'); //berhenti sebelum tanda titik 2
        
        //dari besar offset dapat diketahui jumlah digit data yang masuk
        if (offset==6)
        {
            ribuan =  toInt(dataSize[0]) * 1000;
            ratusan = toInt(dataSize[1]) * 100;
            puluhan = toInt(dataSize[2]) * 10;
            satuan = toInt(dataSize[3]);
            total = ribuan+ratusan+puluhan+satuan;
        }
        else if (offset==5)
        {
            ratusan = toInt(dataSize[0]) * 100;
            puluhan = toInt(dataSize[1]) * 10;
            satuan = toInt(dataSize[2]);
            total = ratusan+puluhan+satuan;
        }
        else if (offset==4)
        {
            puluhan = toInt(dataSize[0]) * 10;
            satuan = toInt(dataSize[1]);
            total = puluhan+satuan;
        }
        else if (offset==3)
        {
            satuan = toInt(dataSize[0]);
            total = satuan;
        } 
        return total;
    }
    else return -1;
}

/* belum kepake
bool sendAndWait(char * command , char * response, int timeout, bool debug)
{
    char data[CUSTOM_BUFFER_SIZE];
    bool received = true;

    usartOutput = USART0;    
    printf("%s\r\n",command);
    
    while(1)
    {
        if (serial0Available)
        {
            data[i] = getchar();
            if (debug)
            {
                usartOutput = USART1;    
                putchar1(data[i]);
            }
            received = true;
            count = 0;
            i++;
        }
                
        if ((count>=timeout) && (received))
        {
            received = false;

            for (j=i;j<CUSTOM_BUFFER_SIZE;j++)
            {
                data[j]=NULL;
            }

            i=0;
                        
            if (isFound(data,response))
            {
                if (debug)
                {
                    usartOutput = USART1;
                    printf("Response Matched");
                }
                return true;
            }
            else
            {
                if (debug)
                {
                    usartOutput = USART1;
                    printf("Response Mismatched");
                }
                return false;    
            }
        }   
    }
}
*/

/**
* Clear Buffer
* mengembalikan semua index ke 0, dan mereset semua nilai pada buffernya jadi null
*/
void clearBuffer()
{ 
    unsigned char temp;
    for (temp=0;temp<RX_BUFFER_SIZE0; temp++) rx_buffer0[temp]=NULL;             
    for (temp=0;temp<RX_BUFFER_SIZE1; temp++) rx_buffer1[temp]=NULL;      
    rx_wr_index0=0;   
    rx_rd_index0=0;
    serial0Available=0;
    rx_wr_index1=0;   
    rx_rd_index1=0;
    serial1Available=0;
}

void toggleLed()
{
    //PORTL ^= 1 << 7;
}

void updateConnection()
{
    lcd_clear();
    lcd_gotoxy(0,1);
    lcd_putsf("UPDATE");    
    if (!busy && afterReset>1)
    {
        battery++;
        if (battery > 100)  battery=0;   
    
        lcd_gotoxy(7,1);
        lcd_putsf("OK");    

        setting = true;
        usartOutput=USART0;                
        printf("AT+CIPMUX=1\r\n");
        delay_ms(100);
        printf("AT+CIPSERVER=1,80\r\n");
        delay_ms(250);
        setting = false;
    }
    else
    {
        lcd_gotoxy(7,1);
        lcd_putsf("NO");    
    }
}

void sendStatus()
{
    lcd_clear();
    lcd_gotoxy(0,1);
    lcd_putsf("STATUS");    
    if (!setting && afterReset>1)
   {
        lcd_gotoxy(7,1);
        lcd_putsf("OK");    
        busy = true; 
        usartOutput=USART0;                                              
        printf("AT+CIPSTART=4,\"TCP\",\"192.168.0.250\",80\r\n");
        delay_ms(500);
        printf("AT+CIPSEND=4,33\r\n");
        delay_ms(500);
        printf("GET /AGV/setAll/%d/%d/%d/%d/%d/%d/%d\r\n",id,connected,motor,signals,battery,position,obstacle);    
        delay_ms(500);
        busy = false;      
   }
   else
   {
      lcd_gotoxy(7,1);
        lcd_putsf("NO");
   }
}

void resetModule()
{
    afterReset=0;
    lcd_clear();
    lcd_gotoxy(0,1);
    lcd_putsf("RESETS");   
    delay_ms(1000);
    if (!setting && !busy)
   {                      
        lcd_gotoxy(7,1);
        lcd_putsf("OK");
        usartOutput=USART0;                                              
        printf("AT+RST\r\n");
   }                
   else
   {
        lcd_gotoxy(7,1);
        lcd_putsf("NO");
   }
}
  
void main(void)
{
    bool received = false, debug=false;
    char data[CUSTOM_BUFFER_SIZE];
    int indexConnectionId, indexCommand, connectionId, command, incomingSize, offset, len;
    
    //contoh data yang akan dikirim ke client, kalau ada yang ngirim data ke ESP8266 nya
    char send[] = "<title>AGV</title><h1>AGV Project</h1><h2>Client #1</h2><button>Test Button 1</button>";
        
    initAll();
        
    lcd_putsf("test");                      
    lcd_gotoxy(0,1);
    lcd_putsf("test");                      
    lcd_gotoxy(0,2);
    lcd_putsf("test");                      
    lcd_gotoxy(0,3);
    lcd_putsf("test");
            
   // usartOutput=USART0; 
   // printf("AT+CIPSTART=4,\"TCP\",\"192.168.0.250\",80\r\n");
   // delay_ms(300);                      

    while(1)
    {
        //lcd_gotoxy(0,3);
        //itoa(afterReset,lcd);
        //lcd_puts(lcd);
        
        //setiap menerima input tidak akan terperangkap dalam close loop di dalam if ini,
        //meskipun menggunakan while juga sama, jadi pakai if saja          
        if (serial0Available)
        {
            busy = true;
            received = true;
            count = 0;
            
            //Selama dapat command dari luar (USART1), 
            //output respon ESP8266 di USART0 akan di verbose ke USART1 lagi
            if (debug)
            {
                usartOutput = USART1;   
                putchar1(getchar());
            }
            //jika command bukan dari luar, respon dari ESP8266 akan dianggap sebagai input
            //dan disimpan di buffer
            else 
            {
                usartOutput = USART0;
                data[i] = getchar();
                i++;
            }
        }
        
        //Setelah tidak ada input dalam beberapa saat, akan masuk ke if ini
        //agar data dapat diproses         
        if ((count>0) && (received) && (!debug))
        {
            //data sudah di custom buffer, reset internal buffer ke null
            clearBuffer();
            busy = false;             
            received = false;

            i=0;
            if (isFound(data,"+IPD,"))
            {   
                usartOutput = USART1;
                indexConnectionId = getIndexAfterward(data,"+IPD,");
                connectionId =  toInt(data[indexConnectionId]);
                                    
                incomingSize = getDataSize(data);
               
                //contoh command sederhana, custom tergantung dari web nya
                if (isFound(data,"cmd="))
                {   
                    indexCommand = getIndexAfterward(data,"cmd=");
                    command = toInt(data[indexCommand]);

                    if (command == 0)
                    {
                        lcd_clear();
                        lcd_putsf("OFF");
                        motor = 0;
                        PORTL = 0x00;
                    } 
                    else if (command == 1)
                    {      
                        lcd_clear();
                        lcd_putsf("ON");
                        motor = 1;
                        PORTL = 0xff;
                    }
                    
                    clearBuffer();  //jaga2, clear lagi aja 
                }
                else
                {                           
                    printf("\r\n\n%d BYTE OF DATA FROM CHANNEL %d\r\n",incomingSize,connectionId);
                                    
                    if (incomingSize>999) offset = 6;
                    else if (incomingSize>99) offset = 5;
                    else if (incomingSize>9) offset = 4;
                    else offset = 3;

                    printf("\r\n/***BEGINNING OF THE DATA***/\r\n"); 

                    do
                    {
                        offset++;
                        putchar1(data[indexConnectionId+offset]);
                    }
                    while (offset<incomingSize+3);
                                    
                    printf("\r\n/***END OF THE DATA***/\r\n");
                    
                    len = strlen(send);
                    
                    usartOutput=USART0; 
                    
                    //untuk kirim balik data               
                    printf("AT+CIPSEND=%d,%d\r\n",connectionId,len);
                    delay_ms(100);
                    printf("%s\r\n",send);
                    delay_ms(100); 
                }
                
                //setelah terjadi koneksi, tutup koneksi dengan AT+CIPCLOSE
                usartOutput=USART0;
                printf("AT+CIPCLOSE=%d\r\n",connectionId);
                delay_ms(100); 
                printf("AT+CIPCLOSE=%d\r\n",connectionId);
                delay_ms(100);                
            }
        }
        
        //jika sebelumnya ada data dari luar (USART1), kembalikan flag ke default (matikan debug mode)
        if ((count>0) && (received) && (debug))
        {
            debug = false;
            usartOutput=USART0;
        }
        
        //jika terdapat input dari luar (USART1), aktifkan debug
        if(serial1Available)
        {
            debug = true;
            usartOutput=USART0;
            putchar(getchar1());
        }
    }
}