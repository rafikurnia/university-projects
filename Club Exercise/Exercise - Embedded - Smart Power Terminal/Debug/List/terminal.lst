
AVRASM ver. 2.1.30  D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm Fri Jun 13 13:41:02 2014

D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.10 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _menu=R4
                 	.DEF _menu_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002b 6d45
00002c 6562
00002d 6464
00002e 6465      	.DB  0x45,0x6D,0x62,0x65,0x64,0x64,0x65,0x64
00002f 7845
000030 7265
000031 6963
000032 6573      	.DB  0x45,0x78,0x65,0x72,0x63,0x69,0x73,0x65
000033 5300
000034 6c69
000035 6861
000036 616b      	.DB  0x0,0x53,0x69,0x6C,0x61,0x68,0x6B,0x61
000037 206e
000038 6950
000039 696c
00003a 2068      	.DB  0x6E,0x20,0x50,0x69,0x6C,0x69,0x68,0x20
00003b 6554
00003c 6d72
00003d 6e69
00003e 6c61      	.DB  0x54,0x65,0x72,0x6D,0x69,0x6E,0x61,0x6C
00003f 5400
000040 7265
000041 696d
000042 616e      	.DB  0x0,0x54,0x65,0x72,0x6D,0x69,0x6E,0x61
000043 206c
000044 0031
000045 2e31
000046 4950      	.DB  0x6C,0x20,0x31,0x0,0x31,0x2E,0x50,0x49
000047 2052
000048 2e32
000049 2054
00004a 2e33      	.DB  0x52,0x20,0x32,0x2E,0x54,0x20,0x33,0x2E
00004b 4843
00004c 0059
00004d 6554
00004e 6d72      	.DB  0x43,0x48,0x59,0x0,0x54,0x65,0x72,0x6D
00004f 6e69
000050 6c61
000051 3220
000052 5400      	.DB  0x69,0x6E,0x61,0x6C,0x20,0x32,0x0,0x54
000053 7265
000054 696d
000055 616e
000056 206c      	.DB  0x65,0x72,0x6D,0x69,0x6E,0x61,0x6C,0x20
000057 0033
000058 6554
000059 6d72
00005a 6e69      	.DB  0x33,0x0,0x54,0x65,0x72,0x6D,0x69,0x6E
00005b 6c61
00005c 3420
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1140): warning: .cseg .db misalignment - padding zero byte
00005d 0000      	.DB  0x61,0x6C,0x20,0x34,0x0
                 _0x2000060:
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1142): warning: .cseg .db misalignment - padding zero byte
00005e 0001      	.DB  0x1
                 _0x2000000:
00005f 4e2d
000060 4e41
000061 4900
000062 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Dropbox\Exercise - Embedded - Smart Power Terminal\Debug\List\terminal.asm(1145): warning: .cseg .db misalignment - padding zero byte
000063 0000      	.DB  0x0
                 _0x2020003:
000064 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000065 0002      	.DW  0x02
000066 0004      	.DW  0x04
000067 0054      	.DW  __REG_VARS*2
                 
000068 0001      	.DW  0x01
000069 0168      	.DW  __seed_G100
00006a 00bc      	.DW  _0x2000060*2
                 
00006b 0002      	.DW  0x02
00006c 016c      	.DW  __base_y_G101
00006d 00c8      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00006e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bffb      	OUT  GICR,R31
000074 bfeb      	OUT  GICR,R30
000075 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000076 e08d      	LDI  R24,(14-2)+1
000077 e0a2      	LDI  R26,2
000078 27bb      	CLR  R27
                 __CLEAR_REG:
000079 93ed      	ST   X+,R30
00007a 958a      	DEC  R24
00007b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00007f 93ed      	ST   X+,R30
000080 9701      	SBIW R24,1
000081 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000082 ecea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000083 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000084 9185      	LPM  R24,Z+
000085 9195      	LPM  R25,Z+
000086 9700      	SBIW R24,0
000087 f061      	BREQ __GLOBAL_INI_END
000088 91a5      	LPM  R26,Z+
000089 91b5      	LPM  R27,Z+
00008a 9005      	LPM  R0,Z+
00008b 9015      	LPM  R1,Z+
00008c 01bf      	MOVW R22,R30
00008d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008e 9005      	LPM  R0,Z+
00008f 920d      	ST   X+,R0
000090 9701      	SBIW R24,1
000091 f7e1      	BRNE __GLOBAL_INI_LOOP
000092 01fb      	MOVW R30,R22
000093 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000094 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000095 bfed      	OUT  SPL,R30
000096 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000097 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000098 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000099 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009a 940c 0250 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : Exercise - Embedded Division - Smart Power Terminal
                 ;Date    : 13/06/2014
                 ;Author  : Rafi Kurnia Putra
                 ;Company : Universitas Indonesia
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11,059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdbool.h>
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;#define t1on  PORTB.0 = 1;
                 ;#define t1off PORTB.0 = 0;
                 ;#define t2on  PORTB.1 = 1;
                 ;#define t2off PORTB.1 = 0;
                 ;#define t3on  PORTB.2 = 1;
                 ;#define t3off PORTB.2 = 0;
                 ;#define t4on  PORTB.3 = 1;
                 ;#define t4off PORTB.3 = 0;
                 ;
                 ;int state[4] = {0}, menu = 0;
                 ;
                 ;void port_setup()
                 ; 0000 0023 {
                 
                 	.CSEG
                 _port_setup:
                 ; .FSTART _port_setup
                 ; 0000 0024 	DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00009c e0e0      	LDI  R30,LOW(0)
00009d bbea      	OUT  0x1A,R30
                 ; 0000 0025 	PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00009e bbeb      	OUT  0x1B,R30
                 ; 0000 0026 
                 ; 0000 0027 	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00009f e0ef      	LDI  R30,LOW(15)
0000a0 bbe7      	OUT  0x17,R30
                 ; 0000 0028 	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bbe8      	OUT  0x18,R30
                 ; 0000 0029 
                 ; 0000 002A 	DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000a3 efef      	LDI  R30,LOW(255)
0000a4 bbe4      	OUT  0x14,R30
                 ; 0000 002B 	PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bbe5      	OUT  0x15,R30
                 ; 0000 002C 
                 ; 0000 002D 	DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000a7 efef      	LDI  R30,LOW(255)
0000a8 bbe1      	OUT  0x11,R30
                 ; 0000 002E 	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbe2      	OUT  0x12,R30
                 ; 0000 002F }
0000ab 9508      	RET
                 ; .FEND
                 ;
                 ;void misc_setup()
                 ; 0000 0032 {
                 _misc_setup:
                 ; .FSTART _misc_setup
                 ; 0000 0033 	TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bfe3      	OUT  0x33,R30
                 ; 0000 0034 	TCNT0=0x00;
0000ae bfe2      	OUT  0x32,R30
                 ; 0000 0035 	OCR0=0x00;
0000af bfec      	OUT  0x3C,R30
                 ; 0000 0036 	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b0 bdef      	OUT  0x2F,R30
                 ; 0000 0037 	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b1 bdee      	OUT  0x2E,R30
                 ; 0000 0038 	TCNT1H=0x00;
0000b2 bded      	OUT  0x2D,R30
                 ; 0000 0039 	TCNT1L=0x00;
0000b3 bdec      	OUT  0x2C,R30
                 ; 0000 003A 	ICR1H=0x00;
0000b4 bde7      	OUT  0x27,R30
                 ; 0000 003B 	ICR1L=0x00;
0000b5 bde6      	OUT  0x26,R30
                 ; 0000 003C 	OCR1AH=0x00;
0000b6 bdeb      	OUT  0x2B,R30
                 ; 0000 003D 	OCR1AL=0x00;
0000b7 bdea      	OUT  0x2A,R30
                 ; 0000 003E 	OCR1BH=0x00;
0000b8 bde9      	OUT  0x29,R30
                 ; 0000 003F 	OCR1BL=0x00;
0000b9 bde8      	OUT  0x28,R30
                 ; 0000 0040 	ASSR=0<<AS2;
0000ba bde2      	OUT  0x22,R30
                 ; 0000 0041 	TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000bb bde5      	OUT  0x25,R30
                 ; 0000 0042 	TCNT2=0x00;
0000bc bde4      	OUT  0x24,R30
                 ; 0000 0043 	OCR2=0x00;
0000bd bde3      	OUT  0x23,R30
                 ; 0000 0044 	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000be bfe9      	OUT  0x39,R30
                 ; 0000 0045 	MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000bf bfe5      	OUT  0x35,R30
                 ; 0000 0046 	MCUCSR=(0<<ISC2);
0000c0 bfe4      	OUT  0x34,R30
                 ; 0000 0047 	UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c1 b9ea      	OUT  0xA,R30
                 ; 0000 0048 	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c2 e8e0      	LDI  R30,LOW(128)
0000c3 b9e8      	OUT  0x8,R30
                 ; 0000 0049 	ADMUX=ADC_VREF_TYPE;
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 b9e7      	OUT  0x7,R30
                 ; 0000 004A 	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000c6 e8e4      	LDI  R30,LOW(132)
0000c7 b9e6      	OUT  0x6,R30
                 ; 0000 004B 	SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 bfe0      	OUT  0x30,R30
                 ; 0000 004C 	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000ca b9ed      	OUT  0xD,R30
                 ; 0000 004D 	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000cb bfe6      	OUT  0x36,R30
                 ; 0000 004E }
0000cc 9508      	RET
                 ; .FEND
                 ;
                 ;void cek_reset()
                 ; 0000 0051 {
                 _cek_reset:
                 ; .FSTART _cek_reset
                 ; 0000 0052 	if (MCUCSR & (1<<PORF)) MCUCSR&=~((1<<JTRF) | (1<<WDRF) | (1<<BORF) | (1<<EXTRF) | (1<<PORF));
0000cd b7e4      	IN   R30,0x34
0000ce fde0      	SBRC R30,0
0000cf c00c      	RJMP _0xB7
                 ; 0000 0053 	else if (MCUCSR & (1<<EXTRF)) MCUCSR&=~((1<<JTRF) | (1<<WDRF) | (1<<BORF) | (1<<EXTRF) | (1<<PORF));
0000d0 b7e4      	IN   R30,0x34
0000d1 fde1      	SBRC R30,1
0000d2 c009      	RJMP _0xB7
                 ; 0000 0054 	else if (MCUCSR & (1<<BORF)) MCUCSR&=~((1<<JTRF) | (1<<WDRF) | (1<<BORF) | (1<<EXTRF) | (1<<PORF));
0000d3 b7e4      	IN   R30,0x34
0000d4 fde2      	SBRC R30,2
0000d5 c006      	RJMP _0xB7
                 ; 0000 0055 	else if (MCUCSR & (1<<WDRF)) MCUCSR&=~((1<<JTRF) | (1<<WDRF) | (1<<BORF) | (1<<EXTRF) | (1<<PORF));
0000d6 b7e4      	IN   R30,0x34
0000d7 fde3      	SBRC R30,3
0000d8 c003      	RJMP _0xB7
                 ; 0000 0056 	else if (MCUCSR & (1<<JTRF)) MCUCSR&=~((1<<JTRF) | (1<<WDRF) | (1<<BORF) | (1<<EXTRF) | (1<<PORF));
0000d9 b7e4      	IN   R30,0x34
0000da ffe4      	SBRS R30,4
0000db c003      	RJMP _0xB
                 _0xB7:
0000dc b7e4      	IN   R30,0x34
0000dd 7ee0      	ANDI R30,LOW(0xE0)
0000de bfe4      	OUT  0x34,R30
                 ; 0000 0057 }
                 _0xB:
0000df 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned int baca_sensor(unsigned char adc_input)
                 ; 0000 005A {
                 _baca_sensor:
                 ; .FSTART _baca_sensor
                 ; 0000 005B 	ADMUX=adc_input | ADC_VREF_TYPE;
0000e0 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000e1 81e8      	LD   R30,Y
0000e2 b9e7      	OUT  0x7,R30
                 ; 0000 005C 	delay_us(10);
                +
0000e3 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
0000e4 958a     +DEC R24
0000e5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 005D 	ADCSRA|=(1<<ADSC);
0000e6 9a36      	SBI  0x6,6
                 ; 0000 005E 	while ((ADCSRA & (1<<ADIF))==0);
                 _0xC:
0000e7 9b34      	SBIS 0x6,4
0000e8 cffe      	RJMP _0xC
                 ; 0000 005F 	ADCSRA|=(1<<ADIF);
0000e9 9a34      	SBI  0x6,4
                 ; 0000 0060 	return ADCW;
0000ea b1e4      	IN   R30,0x4
0000eb b1f5      	IN   R31,0x4+1
0000ec 940c 02e5 	JMP  _0x20A0001
                 ; 0000 0061 }
                 ; .FEND
                 ;
                 ;bool cek_pir()
                 ; 0000 0064 {
                 _cek_pir:
                 ; .FSTART _cek_pir
                 ; 0000 0065 	if (PINB.4 == 1) return true;
0000ee 99b4      	SBIC 0x16,4
0000ef c008      	RJMP _0x20A0004
                 ; 0000 0066 	else return false;
0000f0 c009      	RJMP _0x20A0003
                 ; 0000 0067 }
                 ; .FEND
                 ;
                 ;bool cek_suhu()
                 ; 0000 006A {
                 _cek_suhu:
                 ; .FSTART _cek_suhu
                 ; 0000 006B 	if (baca_sensor(0) > 512) return true;
0000f1 940e 02e7 	CALL SUBOPT_0x0
0000f3 f420      	BRSH _0x20A0004
                 ; 0000 006C 	else return false;
0000f4 c005      	RJMP _0x20A0003
                 ; 0000 006D }
                 ; .FEND
                 ;
                 ;bool cek_cahaya()
                 ; 0000 0070 {
                 _cek_cahaya:
                 ; .FSTART _cek_cahaya
                 ; 0000 0071 	if (baca_sensor(0) > 512) return true;
0000f5 940e 02e7 	CALL SUBOPT_0x0
0000f7 f010      	BRLO _0x13
                 _0x20A0004:
0000f8 e0e1      	LDI  R30,LOW(1)
0000f9 9508      	RET
                 ; 0000 0072 	else return false;
                 _0x13:
                 _0x20A0003:
0000fa e0e0      	LDI  R30,LOW(0)
0000fb 9508      	RET
                 ; 0000 0073 }
0000fc 9508      	RET
                 ; .FEND
                 ;
                 ;int baca_keypad()
                 ; 0000 0076 {
                 _baca_keypad:
                 ; .FSTART _baca_keypad
                 ; 0000 0077 	while(1)
                 _0x15:
                 ; 0000 0078 	{
                 ; 0000 0079 		PORTD.4=0;
0000fd 9894      	CBI  0x12,4
                 ; 0000 007A 		delay_ms(10);
0000fe 940e 02ee 	CALL SUBOPT_0x1
                 ; 0000 007B 		if      (PIND.0==0){return 1;}
000100 9980      	SBIC 0x10,0
000101 c003      	RJMP _0x1A
000102 e0e1      	LDI  R30,LOW(1)
000103 e0f0      	LDI  R31,HIGH(1)
000104 9508      	RET
                 ; 0000 007C 		else if (PIND.1==0){return 2;}
                 _0x1A:
000105 9981      	SBIC 0x10,1
000106 c003      	RJMP _0x1C
000107 e0e2      	LDI  R30,LOW(2)
000108 e0f0      	LDI  R31,HIGH(2)
000109 9508      	RET
                 ; 0000 007D 		else if (PIND.2==0){return 3;}
                 _0x1C:
00010a 9982      	SBIC 0x10,2
00010b c003      	RJMP _0x1E
00010c e0e3      	LDI  R30,LOW(3)
00010d e0f0      	LDI  R31,HIGH(3)
00010e 9508      	RET
                 ; 0000 007E 
                 ; 0000 007F 		PORTD.4=1; PORTD.5=0;
                 _0x1E:
00010f 9a94      	SBI  0x12,4
000110 9895      	CBI  0x12,5
                 ; 0000 0080 		delay_ms(10);
000111 940e 02ee 	CALL SUBOPT_0x1
                 ; 0000 0081 		if      (PIND.0==0){return 4;}
000113 9980      	SBIC 0x10,0
000114 c003      	RJMP _0x23
000115 e0e4      	LDI  R30,LOW(4)
000116 e0f0      	LDI  R31,HIGH(4)
000117 9508      	RET
                 ; 0000 0082 		//else if (PIND.1==0){return 5;}
                 ; 0000 0083 		//else if (PIND.2==0){return 6;}
                 ; 0000 0084 
                 ; 0000 0085 		PORTD.5=1; //PORTD.6=0;
                 _0x23:
000118 9a95      	SBI  0x12,5
                 ; 0000 0086 		//delay_ms(10);
                 ; 0000 0087 		//if      (PIND.0==0){return 7;}
                 ; 0000 0088 		//else if (PIND.1==0){return 8;}
                 ; 0000 0089 		//else if (PIND.2==0){return 9;}
                 ; 0000 008A 
                 ; 0000 008B 		/*PORTD.6=1;*/ PORTD.7=0;
000119 9897      	CBI  0x12,7
                 ; 0000 008C 		delay_ms(10);
00011a 940e 02ee 	CALL SUBOPT_0x1
                 ; 0000 008D 		if      (PIND.1==0){return 0;}
00011c 9981      	SBIC 0x10,1
00011d c003      	RJMP _0x28
00011e e0e0      	LDI  R30,LOW(0)
00011f e0f0      	LDI  R31,HIGH(0)
000120 9508      	RET
                 ; 0000 008E 
                 ; 0000 008F 		PORTD.7=1;
                 _0x28:
000121 9a97      	SBI  0x12,7
                 ; 0000 0090 		delay_ms(10);
000122 940e 02ee 	CALL SUBOPT_0x1
                 ; 0000 0091 	}
000124 cfd8      	RJMP _0x15
                 ; 0000 0092 }
                 ; .FEND
                 ;
                 ;void gui()
                 ; 0000 0095 {
                 _gui:
                 ; .FSTART _gui
                 ; 0000 0096 	int pilih=0;
                 ; 0000 0097 
                 ; 0000 0098 	if (menu==0)
000125 931a      	ST   -Y,R17
000126 930a      	ST   -Y,R16
                 ;	pilih -> R16,R17
                +
000127 e000     +LDI R16 , LOW ( 0 )
000128 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000129 2c04      	MOV  R0,R4
00012a 2805      	OR   R0,R5
00012b f469      	BRNE _0x2B
                 ; 0000 0099 	{
                 ; 0000 009A 		lcd_clear();
00012c 940e 02f2 	CALL SUBOPT_0x2
                 ; 0000 009B 		lcd_gotoxy(0,0);
                 ; 0000 009C 		lcd_putsf("EmbeddedExercise");
                +
00012e e5a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00012f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000130 940e 02f9 	CALL SUBOPT_0x3
                 ; 0000 009D 		lcd_gotoxy(0,1);
                 ; 0000 009E 		lcd_putsf("Silahkan Pilih Terminal");
                +
000132 e6a7     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
000133 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
000134 940e 0300 	CALL SUBOPT_0x4
                 ; 0000 009F 		pilih=baca_keypad();
                 ; 0000 00A0 		if (pilih != 0) menu=pilih;
000136 f009      	BREQ _0x2C
000137 0128      	MOVW R4,R16
                 ; 0000 00A1 	}
                 _0x2C:
                 ; 0000 00A2 	else if (menu==1)
000138 c057      	RJMP _0x2D
                 _0x2B:
000139 e0e1      	LDI  R30,LOW(1)
00013a e0f0      	LDI  R31,HIGH(1)
00013b 15e4      	CP   R30,R4
00013c 05f5      	CPC  R31,R5
00013d f489      	BRNE _0x2E
                 ; 0000 00A3 	{
                 ; 0000 00A4 		lcd_clear();
00013e 940e 02f2 	CALL SUBOPT_0x2
                 ; 0000 00A5 		lcd_gotoxy(0,0);
                 ; 0000 00A6 		lcd_putsf("Terminal 1");
                +
000140 e7af     +LDI R26 , LOW ( 2 * _0x0 + ( 41 ) )
000141 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW2FN _0x0,41
000142 940e 02f9 	CALL SUBOPT_0x3
                 ; 0000 00A7 		lcd_gotoxy(0,1);
                 ; 0000 00A8 		lcd_putsf("1.PIR 2.T 3.CHY");
000144 940e 0308 	CALL SUBOPT_0x5
                 ; 0000 00A9 		pilih = baca_keypad();
                 ; 0000 00AA 		if (pilih != 0) state[0] = pilih;
000146 f029      	BREQ _0x2F
                +
000147 9300 0160+STS _state + ( 0 ) , R16
000149 9310 0161+STS _state + ( 0 ) + 1 , R17
                 	__PUTWMRN _state,0,16,17
                 ; 0000 00AB 		else menu=0;
00014b c002      	RJMP _0x30
                 _0x2F:
00014c 2444      	CLR  R4
00014d 2455      	CLR  R5
                 ; 0000 00AC 	}
                 _0x30:
                 ; 0000 00AD 	else if (menu==2)
00014e c041      	RJMP _0x31
                 _0x2E:
00014f e0e2      	LDI  R30,LOW(2)
000150 e0f0      	LDI  R31,HIGH(2)
000151 15e4      	CP   R30,R4
000152 05f5      	CPC  R31,R5
000153 f489      	BRNE _0x32
                 ; 0000 00AE 	{
                 ; 0000 00AF 		lcd_clear();
000154 940e 02f2 	CALL SUBOPT_0x2
                 ; 0000 00B0 		lcd_gotoxy(0,0);
                 ; 0000 00B1 		lcd_putsf("Terminal 2");
                +
000156 e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 68 ) )
000157 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 68 ) )
                 	__POINTW2FN _0x0,68
000158 940e 02f9 	CALL SUBOPT_0x3
                 ; 0000 00B2 		lcd_gotoxy(0,1);
                 ; 0000 00B3 		lcd_putsf("1.PIR 2.T 3.CHY");
00015a 940e 0308 	CALL SUBOPT_0x5
                 ; 0000 00B4 		pilih = baca_keypad();
                 ; 0000 00B5 		if (pilih != 0) state[1] = pilih;
00015c f029      	BREQ _0x33
                +
00015d e6e2     +LDI R30 , LOW ( _state + ( 2 ) )
00015e e0f1     +LDI R31 , HIGH ( _state + ( 2 ) )
                 	__POINTW1MN _state,2
00015f 8300      	ST   Z,R16
000160 8311      	STD  Z+1,R17
                 ; 0000 00B6 		else menu=0;
000161 c002      	RJMP _0x34
                 _0x33:
000162 2444      	CLR  R4
000163 2455      	CLR  R5
                 ; 0000 00B7 	}
                 _0x34:
                 ; 0000 00B8 	else if (menu==3)
000164 c02b      	RJMP _0x35
                 _0x32:
000165 e0e3      	LDI  R30,LOW(3)
000166 e0f0      	LDI  R31,HIGH(3)
000167 15e4      	CP   R30,R4
000168 05f5      	CPC  R31,R5
000169 f489      	BRNE _0x36
                 ; 0000 00B9 	{
                 ; 0000 00BA 		lcd_clear();
00016a 940e 02f2 	CALL SUBOPT_0x2
                 ; 0000 00BB 		lcd_gotoxy(0,0);
                 ; 0000 00BC 		lcd_putsf("Terminal 3");
                +
00016c eaa5     +LDI R26 , LOW ( 2 * _0x0 + ( 79 ) )
00016d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 79 ) )
                 	__POINTW2FN _0x0,79
00016e 940e 02f9 	CALL SUBOPT_0x3
                 ; 0000 00BD 		lcd_gotoxy(0,1);
                 ; 0000 00BE 		lcd_putsf("1.PIR 2.T 3.CHY");
000170 940e 0308 	CALL SUBOPT_0x5
                 ; 0000 00BF 		pilih = baca_keypad();
                 ; 0000 00C0 		if (pilih != 0) state[2] = pilih;
000172 f029      	BREQ _0x37
                +
000173 e6e4     +LDI R30 , LOW ( _state + ( 4 ) )
000174 e0f1     +LDI R31 , HIGH ( _state + ( 4 ) )
                 	__POINTW1MN _state,4
000175 8300      	ST   Z,R16
000176 8311      	STD  Z+1,R17
                 ; 0000 00C1 		else menu=0;
000177 c002      	RJMP _0x38
                 _0x37:
000178 2444      	CLR  R4
000179 2455      	CLR  R5
                 ; 0000 00C2 	}
                 _0x38:
                 ; 0000 00C3 	else if (menu==4)
00017a c015      	RJMP _0x39
                 _0x36:
00017b e0e4      	LDI  R30,LOW(4)
00017c e0f0      	LDI  R31,HIGH(4)
00017d 15e4      	CP   R30,R4
00017e 05f5      	CPC  R31,R5
00017f f481      	BRNE _0x3A
                 ; 0000 00C4 	{
                 ; 0000 00C5 		lcd_clear();
000180 940e 02f2 	CALL SUBOPT_0x2
                 ; 0000 00C6 		lcd_gotoxy(0,0);
                 ; 0000 00C7 		lcd_putsf("Terminal 4");
                +
000182 eba0     +LDI R26 , LOW ( 2 * _0x0 + ( 90 ) )
000183 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW2FN _0x0,90
000184 940e 02f9 	CALL SUBOPT_0x3
                 ; 0000 00C8 		lcd_gotoxy(0,1);
                 ; 0000 00C9 		lcd_putsf("1.PIR 2.T 3.CHY");
000186 940e 0308 	CALL SUBOPT_0x5
                 ; 0000 00CA 		pilih = baca_keypad();
                 ; 0000 00CB 		if (pilih != 0) state[3] = pilih;
000188 f029      	BREQ _0x3B
                +
000189 e6e6     +LDI R30 , LOW ( _state + ( 6 ) )
00018a e0f1     +LDI R31 , HIGH ( _state + ( 6 ) )
                 	__POINTW1MN _state,6
00018b 8300      	ST   Z,R16
00018c 8311      	STD  Z+1,R17
                 ; 0000 00CC 		else menu=0;
00018d c002      	RJMP _0x3C
                 _0x3B:
00018e 2444      	CLR  R4
00018f 2455      	CLR  R5
                 ; 0000 00CD 	}
                 _0x3C:
                 ; 0000 00CE }
                 _0x3A:
                 _0x39:
                 _0x35:
                 _0x31:
                 _0x2D:
000190 c0bc      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;void program_utama()
                 ; 0000 00D1 {
                 _program_utama:
                 ; .FSTART _program_utama
                 ; 0000 00D2     int i;
                 ; 0000 00D3 	while(1)
000191 931a      	ST   -Y,R17
000192 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                 _0x3D:
                 ; 0000 00D4 	{
                 ; 0000 00D5 		gui();
000193 df91      	RCALL _gui
                 ; 0000 00D6 		for (i=0;i<4;i++)
                +
000194 e000     +LDI R16 , LOW ( 0 )
000195 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x41:
                +
000196 3004     +CPI R16 , LOW ( 4 )
000197 e0e0     +LDI R30 , HIGH ( 4 )
000198 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000199 f00c      	BRLT PC+2
00019a c0b1      	RJMP _0x42
                 ; 0000 00D7 		{
                 ; 0000 00D8 			switch(state[i])
00019b 01f8      	MOVW R30,R16
00019c e6a0      	LDI  R26,LOW(_state)
00019d e0b1      	LDI  R27,HIGH(_state)
00019e 0fee      	LSL  R30
00019f 1fff      	ROL  R31
0001a0 0fae      	ADD  R26,R30
0001a1 1fbf      	ADC  R27,R31
0001a2 940e 0323 	CALL __GETW1P
                 ; 0000 00D9 			{
                 ; 0000 00DA 			case 0:
0001a4 9730      	SBIW R30,0
0001a5 f4b9      	BRNE _0x46
                 ; 0000 00DB 				switch(i)
0001a6 01f8      	MOVW R30,R16
                 ; 0000 00DC 				{
                 ; 0000 00DD 				case 0:
0001a7 9730      	SBIW R30,0
0001a8 f411      	BRNE _0x4A
                 ; 0000 00DE 					t1off;
0001a9 98c0      	CBI  0x18,0
                 ; 0000 00DF 					break;
0001aa c011      	RJMP _0x49
                 ; 0000 00E0 				case 1:
                 _0x4A:
0001ab 30e1      	CPI  R30,LOW(0x1)
0001ac e0a0      	LDI  R26,HIGH(0x1)
0001ad 07fa      	CPC  R31,R26
0001ae f411      	BRNE _0x4D
                 ; 0000 00E1 					t2off;
0001af 98c1      	CBI  0x18,1
                 ; 0000 00E2 					break;
0001b0 c00b      	RJMP _0x49
                 ; 0000 00E3 				case 2:
                 _0x4D:
0001b1 30e2      	CPI  R30,LOW(0x2)
0001b2 e0a0      	LDI  R26,HIGH(0x2)
0001b3 07fa      	CPC  R31,R26
0001b4 f411      	BRNE _0x50
                 ; 0000 00E4 					t3off;
0001b5 98c2      	CBI  0x18,2
                 ; 0000 00E5 					break;
0001b6 c005      	RJMP _0x49
                 ; 0000 00E6 				case 3:
                 _0x50:
0001b7 30e3      	CPI  R30,LOW(0x3)
0001b8 e0a0      	LDI  R26,HIGH(0x3)
0001b9 07fa      	CPC  R31,R26
0001ba f409      	BRNE _0x49
                 ; 0000 00E7 					t4off;
0001bb 98c3      	CBI  0x18,3
                 ; 0000 00E8 					break;
                 ; 0000 00E9 				}
                 _0x49:
                 ; 0000 00EA 				break;
0001bc c08c      	RJMP _0x45
                 ; 0000 00EB 			case 1:
                 _0x46:
0001bd 30e1      	CPI  R30,LOW(0x1)
0001be e0a0      	LDI  R26,HIGH(0x1)
0001bf 07fa      	CPC  R31,R26
0001c0 f559      	BRNE _0x56
                 ; 0000 00EC 				switch(i)
0001c1 01f8      	MOVW R30,R16
                 ; 0000 00ED 				{
                 ; 0000 00EE 				case 0:
0001c2 9730      	SBIW R30,0
0001c3 f439      	BRNE _0x5A
                 ; 0000 00EF 					if (cek_pir()) t1on;
0001c4 df29      	RCALL _cek_pir
0001c5 30e0      	CPI  R30,0
0001c6 f011      	BREQ _0x5B
0001c7 9ac0      	SBI  0x18,0
                 ; 0000 00F0 					else t1off;
0001c8 c001      	RJMP _0x5E
                 _0x5B:
0001c9 98c0      	CBI  0x18,0
                 ; 0000 00F1 					break;
                 _0x5E:
0001ca c020      	RJMP _0x59
                 ; 0000 00F2 				case 1:
                 _0x5A:
0001cb 30e1      	CPI  R30,LOW(0x1)
0001cc e0a0      	LDI  R26,HIGH(0x1)
0001cd 07fa      	CPC  R31,R26
0001ce f439      	BRNE _0x61
                 ; 0000 00F3 					if (cek_pir()) t2on;
0001cf df1e      	RCALL _cek_pir
0001d0 30e0      	CPI  R30,0
0001d1 f011      	BREQ _0x62
0001d2 9ac1      	SBI  0x18,1
                 ; 0000 00F4 					else t2off;
0001d3 c001      	RJMP _0x65
                 _0x62:
0001d4 98c1      	CBI  0x18,1
                 ; 0000 00F5 					break;
                 _0x65:
0001d5 c015      	RJMP _0x59
                 ; 0000 00F6 				case 2:
                 _0x61:
0001d6 30e2      	CPI  R30,LOW(0x2)
0001d7 e0a0      	LDI  R26,HIGH(0x2)
0001d8 07fa      	CPC  R31,R26
0001d9 f439      	BRNE _0x68
                 ; 0000 00F7 					if (cek_pir()) t3on;
0001da df13      	RCALL _cek_pir
0001db 30e0      	CPI  R30,0
0001dc f011      	BREQ _0x69
0001dd 9ac2      	SBI  0x18,2
                 ; 0000 00F8 					else t3off;
0001de c001      	RJMP _0x6C
                 _0x69:
0001df 98c2      	CBI  0x18,2
                 ; 0000 00F9 					break;
                 _0x6C:
0001e0 c00a      	RJMP _0x59
                 ; 0000 00FA 				case 3:
                 _0x68:
0001e1 30e3      	CPI  R30,LOW(0x3)
0001e2 e0a0      	LDI  R26,HIGH(0x3)
0001e3 07fa      	CPC  R31,R26
0001e4 f431      	BRNE _0x59
                 ; 0000 00FB 					if (cek_pir()) t4on;
0001e5 df08      	RCALL _cek_pir
0001e6 30e0      	CPI  R30,0
0001e7 f011      	BREQ _0x70
0001e8 9ac3      	SBI  0x18,3
                 ; 0000 00FC 					else t4off;
0001e9 c001      	RJMP _0x73
                 _0x70:
0001ea 98c3      	CBI  0x18,3
                 ; 0000 00FD 					break;
                 _0x73:
                 ; 0000 00FE 				}
                 _0x59:
                 ; 0000 00FF 				break;
0001eb c05d      	RJMP _0x45
                 ; 0000 0100 			case 2:
                 _0x56:
0001ec 30e2      	CPI  R30,LOW(0x2)
0001ed e0a0      	LDI  R26,HIGH(0x2)
0001ee 07fa      	CPC  R31,R26
0001ef f559      	BRNE _0x76
                 ; 0000 0101 				switch(i)
0001f0 01f8      	MOVW R30,R16
                 ; 0000 0102 				{
                 ; 0000 0103 				case 0:
0001f1 9730      	SBIW R30,0
0001f2 f439      	BRNE _0x7A
                 ; 0000 0104 					if (cek_suhu()) t1on;
0001f3 defd      	RCALL _cek_suhu
0001f4 30e0      	CPI  R30,0
0001f5 f011      	BREQ _0x7B
0001f6 9ac0      	SBI  0x18,0
                 ; 0000 0105 					else t1off;
0001f7 c001      	RJMP _0x7E
                 _0x7B:
0001f8 98c0      	CBI  0x18,0
                 ; 0000 0106 					break;
                 _0x7E:
0001f9 c020      	RJMP _0x79
                 ; 0000 0107 				case 1:
                 _0x7A:
0001fa 30e1      	CPI  R30,LOW(0x1)
0001fb e0a0      	LDI  R26,HIGH(0x1)
0001fc 07fa      	CPC  R31,R26
0001fd f439      	BRNE _0x81
                 ; 0000 0108 					if (cek_suhu()) t2on;
0001fe def2      	RCALL _cek_suhu
0001ff 30e0      	CPI  R30,0
000200 f011      	BREQ _0x82
000201 9ac1      	SBI  0x18,1
                 ; 0000 0109 					else t2off;
000202 c001      	RJMP _0x85
                 _0x82:
000203 98c1      	CBI  0x18,1
                 ; 0000 010A 					break;
                 _0x85:
000204 c015      	RJMP _0x79
                 ; 0000 010B 				case 2:
                 _0x81:
000205 30e2      	CPI  R30,LOW(0x2)
000206 e0a0      	LDI  R26,HIGH(0x2)
000207 07fa      	CPC  R31,R26
000208 f439      	BRNE _0x88
                 ; 0000 010C 					if (cek_suhu()) t3on;
000209 dee7      	RCALL _cek_suhu
00020a 30e0      	CPI  R30,0
00020b f011      	BREQ _0x89
00020c 9ac2      	SBI  0x18,2
                 ; 0000 010D 					else t3off;
00020d c001      	RJMP _0x8C
                 _0x89:
00020e 98c2      	CBI  0x18,2
                 ; 0000 010E 					break;
                 _0x8C:
00020f c00a      	RJMP _0x79
                 ; 0000 010F 				case 3:
                 _0x88:
000210 30e3      	CPI  R30,LOW(0x3)
000211 e0a0      	LDI  R26,HIGH(0x3)
000212 07fa      	CPC  R31,R26
000213 f431      	BRNE _0x79
                 ; 0000 0110 					if (cek_suhu()) t4on;
000214 dedc      	RCALL _cek_suhu
000215 30e0      	CPI  R30,0
000216 f011      	BREQ _0x90
000217 9ac3      	SBI  0x18,3
                 ; 0000 0111 					else t4off;
000218 c001      	RJMP _0x93
                 _0x90:
000219 98c3      	CBI  0x18,3
                 ; 0000 0112 					break;
                 _0x93:
                 ; 0000 0113 				}
                 _0x79:
                 ; 0000 0114 				break;
00021a c02e      	RJMP _0x45
                 ; 0000 0115 			case 3:
                 _0x76:
00021b 30e3      	CPI  R30,LOW(0x3)
00021c e0a0      	LDI  R26,HIGH(0x3)
00021d 07fa      	CPC  R31,R26
00021e f551      	BRNE _0x45
                 ; 0000 0116 				switch(i)
00021f 01f8      	MOVW R30,R16
                 ; 0000 0117 				{
                 ; 0000 0118 				case 0:
000220 9730      	SBIW R30,0
000221 f439      	BRNE _0x9A
                 ; 0000 0119 					if (cek_cahaya()) t1on;
000222 ded2      	RCALL _cek_cahaya
000223 30e0      	CPI  R30,0
000224 f011      	BREQ _0x9B
000225 9ac0      	SBI  0x18,0
                 ; 0000 011A 					else t1off;
000226 c001      	RJMP _0x9E
                 _0x9B:
000227 98c0      	CBI  0x18,0
                 ; 0000 011B 					break;
                 _0x9E:
000228 c020      	RJMP _0x99
                 ; 0000 011C 				case 1:
                 _0x9A:
000229 30e1      	CPI  R30,LOW(0x1)
00022a e0a0      	LDI  R26,HIGH(0x1)
00022b 07fa      	CPC  R31,R26
00022c f439      	BRNE _0xA1
                 ; 0000 011D 					if (cek_cahaya()) t2on;
00022d dec7      	RCALL _cek_cahaya
00022e 30e0      	CPI  R30,0
00022f f011      	BREQ _0xA2
000230 9ac1      	SBI  0x18,1
                 ; 0000 011E 					else t2off;
000231 c001      	RJMP _0xA5
                 _0xA2:
000232 98c1      	CBI  0x18,1
                 ; 0000 011F 					break;
                 _0xA5:
000233 c015      	RJMP _0x99
                 ; 0000 0120 				case 2:
                 _0xA1:
000234 30e2      	CPI  R30,LOW(0x2)
000235 e0a0      	LDI  R26,HIGH(0x2)
000236 07fa      	CPC  R31,R26
000237 f439      	BRNE _0xA8
                 ; 0000 0121 					if (cek_cahaya()) t3on;
000238 debc      	RCALL _cek_cahaya
000239 30e0      	CPI  R30,0
00023a f011      	BREQ _0xA9
00023b 9ac2      	SBI  0x18,2
                 ; 0000 0122 					else t3off;
00023c c001      	RJMP _0xAC
                 _0xA9:
00023d 98c2      	CBI  0x18,2
                 ; 0000 0123 					break;
                 _0xAC:
00023e c00a      	RJMP _0x99
                 ; 0000 0124 				case 3:
                 _0xA8:
00023f 30e3      	CPI  R30,LOW(0x3)
000240 e0a0      	LDI  R26,HIGH(0x3)
000241 07fa      	CPC  R31,R26
000242 f431      	BRNE _0x99
                 ; 0000 0125 					if (cek_cahaya()) t4on;
000243 deb1      	RCALL _cek_cahaya
000244 30e0      	CPI  R30,0
000245 f011      	BREQ _0xB0
000246 9ac3      	SBI  0x18,3
                 ; 0000 0126 					else t4off;
000247 c001      	RJMP _0xB3
                 _0xB0:
000248 98c3      	CBI  0x18,3
                 ; 0000 0127 					break;
                 _0xB3:
                 ; 0000 0128 				}
                 _0x99:
                 ; 0000 0129 				break;
                 ; 0000 012A 			}
                 _0x45:
                 ; 0000 012B 		}
                +
000249 5f0f     +SUBI R16 , LOW ( - 1 )
00024a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00024b cf4a      	RJMP _0x41
                 _0x42:
                 ; 0000 012C 	}
00024c cf46      	RJMP _0x3D
                 ; 0000 012D }
                 _0x20A0002:
00024d 9109      	LD   R16,Y+
00024e 9119      	LD   R17,Y+
00024f 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0130 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0131 	port_setup();
000250 de4b      	RCALL _port_setup
                 ; 0000 0132 	misc_setup();
000251 de5a      	RCALL _misc_setup
                 ; 0000 0133 	cek_reset();
000252 de7a      	RCALL _cek_reset
                 ; 0000 0134 	lcd_init(16);
000253 e1a0      	LDI  R26,LOW(16)
000254 940e 02b9 	CALL _lcd_init
                 ; 0000 0135 	program_utama();
000256 df3a      	RCALL _program_utama
                 ; 0000 0136 }
                 _0xB6:
000257 cfff      	RJMP _0xB6
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000258 93aa      	ST   -Y,R26
000259 b3e5      	IN   R30,0x15
00025a 70ef      	ANDI R30,LOW(0xF)
00025b 2fae      	MOV  R26,R30
00025c 81e8      	LD   R30,Y
00025d 7fe0      	ANDI R30,LOW(0xF0)
00025e 2bea      	OR   R30,R26
00025f bbe5      	OUT  0x15,R30
                +
000260 e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
000261 958a     +DEC R24
000262 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
000263 9aaa      	SBI  0x15,2
                +
000264 e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
000265 958a     +DEC R24
000266 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
000267 98aa      	CBI  0x15,2
                +
000268 e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
000269 958a     +DEC R24
00026a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
00026b c079      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00026c 93aa      	ST   -Y,R26
00026d 81a8      	LD   R26,Y
00026e dfe9      	RCALL __lcd_write_nibble_G101
00026f 81e8          ld    r30,y
000270 95e2          swap  r30
000271 83e8          st    y,r30
000272 81a8      	LD   R26,Y
000273 dfe4      	RCALL __lcd_write_nibble_G101
                +
000274 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000275 958a     +DEC R24
000276 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
000277 c06d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000278 93aa      	ST   -Y,R26
000279 81e8      	LD   R30,Y
00027a e0f0      	LDI  R31,0
00027b 59e4      	SUBI R30,LOW(-__base_y_G101)
00027c 4ffe      	SBCI R31,HIGH(-__base_y_G101)
00027d 81e0      	LD   R30,Z
00027e 81a9      	LDD  R26,Y+1
00027f 0fae      	ADD  R26,R30
000280 dfeb      	RCALL __lcd_write_data
000281 8079      	LDD  R7,Y+1
000282 8068      	LDD  R6,Y+0
000283 9622      	ADIW R28,2
000284 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000285 e0a2      	LDI  R26,LOW(2)
000286 940e 030b 	CALL SUBOPT_0x6
000288 e0ac      	LDI  R26,LOW(12)
000289 dfe2      	RCALL __lcd_write_data
00028a e0a1      	LDI  R26,LOW(1)
00028b 940e 030b 	CALL SUBOPT_0x6
00028d e0e0      	LDI  R30,LOW(0)
00028e 2e6e      	MOV  R6,R30
00028f 2e7e      	MOV  R7,R30
000290 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000291 93aa      	ST   -Y,R26
000292 81a8      	LD   R26,Y
000293 30aa      	CPI  R26,LOW(0xA)
000294 f011      	BREQ _0x2020005
000295 1479      	CP   R7,R9
000296 f048      	BRLO _0x2020004
                 _0x2020005:
000297 e0e0      	LDI  R30,LOW(0)
000298 93ea      	ST   -Y,R30
000299 9463      	INC  R6
00029a 2da6      	MOV  R26,R6
00029b dfdc      	RCALL _lcd_gotoxy
00029c 81a8      	LD   R26,Y
00029d 30aa      	CPI  R26,LOW(0xA)
00029e f409      	BRNE _0x2020007
00029f c045      	RJMP _0x20A0001
                 _0x2020007:
                 _0x2020004:
0002a0 9473      	INC  R7
0002a1 9aa8      	SBI  0x15,0
0002a2 81a8      	LD   R26,Y
0002a3 dfc8      	RCALL __lcd_write_data
0002a4 98a8      	CBI  0x15,0
0002a5 c03f      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0002a6 93ba      	ST   -Y,R27
0002a7 93aa      	ST   -Y,R26
0002a8 931a      	ST   -Y,R17
                 _0x202000B:
0002a9 81e9      	LDD  R30,Y+1
0002aa 81fa      	LDD  R31,Y+1+1
0002ab 9631      	ADIW R30,1
0002ac 83e9      	STD  Y+1,R30
0002ad 83fa      	STD  Y+1+1,R31
0002ae 9731      	SBIW R30,1
0002af 91e4      	LPM  R30,Z
0002b0 2f1e      	MOV  R17,R30
0002b1 30e0      	CPI  R30,0
0002b2 f019      	BREQ _0x202000D
0002b3 2fa1      	MOV  R26,R17
0002b4 dfdc      	RCALL _lcd_putchar
0002b5 cff3      	RJMP _0x202000B
                 _0x202000D:
0002b6 8118      	LDD  R17,Y+0
0002b7 9623      	ADIW R28,3
0002b8 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002b9 93aa      	ST   -Y,R26
0002ba b3e4      	IN   R30,0x14
0002bb 6fe0      	ORI  R30,LOW(0xF0)
0002bc bbe4      	OUT  0x14,R30
0002bd 9aa2      	SBI  0x14,2
0002be 9aa0      	SBI  0x14,0
0002bf 9aa1      	SBI  0x14,1
0002c0 98aa      	CBI  0x15,2
0002c1 98a8      	CBI  0x15,0
0002c2 98a9      	CBI  0x15,1
0002c3 8098      	LDD  R9,Y+0
0002c4 81e8      	LD   R30,Y
0002c5 58e0      	SUBI R30,-LOW(128)
                +
0002c6 93e0 016e+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002c8 81e8      	LD   R30,Y
0002c9 54e0      	SUBI R30,-LOW(192)
                +
0002ca 93e0 016f+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002cc e1a4      	LDI  R26,LOW(20)
0002cd e0b0      	LDI  R27,0
0002ce 940e 0319 	CALL _delay_ms
0002d0 940e 0311 	CALL SUBOPT_0x7
0002d2 940e 0311 	CALL SUBOPT_0x7
0002d4 940e 0311 	CALL SUBOPT_0x7
0002d6 e2a0      	LDI  R26,LOW(32)
0002d7 df80      	RCALL __lcd_write_nibble_G101
                +
0002d8 e184     +LDI R24 , LOW ( 276 )
0002d9 e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0002da 9701     +SBIW R24 , 1
0002db f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
0002dc e2a8      	LDI  R26,LOW(40)
0002dd df8e      	RCALL __lcd_write_data
0002de e0a4      	LDI  R26,LOW(4)
0002df df8c      	RCALL __lcd_write_data
0002e0 e8a5      	LDI  R26,LOW(133)
0002e1 df8a      	RCALL __lcd_write_data
0002e2 e0a6      	LDI  R26,LOW(6)
0002e3 df88      	RCALL __lcd_write_data
0002e4 dfa0      	RCALL _lcd_clear
                 _0x20A0001:
0002e5 9621      	ADIW R28,1
0002e6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _state:
000160           	.BYTE 0x8
                 __seed_G100:
000168           	.BYTE 0x4
                 __base_y_G101:
00016c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002e7 e0a0      	LDI  R26,LOW(0)
0002e8 940e 00e0 	CALL _baca_sensor
0002ea 30e1      	CPI  R30,LOW(0x201)
0002eb e0a2      	LDI  R26,HIGH(0x201)
0002ec 07fa      	CPC  R31,R26
0002ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002ee e0aa      	LDI  R26,LOW(10)
0002ef e0b0      	LDI  R27,0
0002f0 940c 0319 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
0002f2 940e 0285 	CALL _lcd_clear
0002f4 e0e0      	LDI  R30,LOW(0)
0002f5 93ea      	ST   -Y,R30
0002f6 e0a0      	LDI  R26,LOW(0)
0002f7 940c 0278 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3:
0002f9 940e 02a6 	CALL _lcd_putsf
0002fb e0e0      	LDI  R30,LOW(0)
0002fc 93ea      	ST   -Y,R30
0002fd e0a1      	LDI  R26,LOW(1)
0002fe 940c 0278 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4:
000300 940e 02a6 	CALL _lcd_putsf
000302 940e 00fd 	CALL _baca_keypad
000304 018f      	MOVW R16,R30
000305 2e00      	MOV  R0,R16
000306 2a01      	OR   R0,R17
000307 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
                +
000308 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 52 ) )
000309 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW2FN _0x0,52
00030a cff5      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00030b 940e 026c 	CALL __lcd_write_data
00030d e0a3      	LDI  R26,LOW(3)
00030e e0b0      	LDI  R27,0
00030f 940c 0319 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000311 e3a0      	LDI  R26,LOW(48)
000312 940e 0258 	CALL __lcd_write_nibble_G101
                +
000314 e184     +LDI R24 , LOW ( 276 )
000315 e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
000316 9701     +SBIW R24 , 1
000317 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
000318 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000319 9610      	adiw r26,0
00031a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00031b ec8d     +LDI R24 , LOW ( 0xACD )
00031c e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
00031d 9701     +SBIW R24 , 1
00031e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
00031f 95a8      	wdr
000320 9711      	sbiw r26,1
000321 f7c9      	brne __delay_ms0
                 __delay_ms1:
000322 9508      	ret
                 
                 __GETW1P:
000323 91ed      	LD   R30,X+
000324 91fc      	LD   R31,X
000325 9711      	SBIW R26,1
000326 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :  10 r5 :   9 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  16 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  83 r27:  15 r28:   4 r29:   1 r30: 178 r31:  43 
x  :   5 y  :  39 z  :  15 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   5 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   0 brne  :  38 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  36 
cbi   :  24 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :  21 cpi   :  32 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   2 jmp   :  27 ld    :  16 ldd   :   7 ldi   : 122 
lds   :   0 lpm   :   9 lsl   :   1 lsr   :   0 mov   :   8 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   1 out   :  45 pop   :   0 push  :   0 rcall :  30 ret   :  21 
reti  :   0 rjmp  :  62 rol   :   1 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  22 sbic  :   6 sbis  :   1 sbiw  :  14 sbr   :   0 sbrc  :   4 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   5 sts   :   4 sub   :   0 subi  :   4 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 47 out of 116 (40.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00064e   1476    138   1614   16384   9.9%
[.dseg] 0x000060 0x000170      0     16     16    1024   1.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
